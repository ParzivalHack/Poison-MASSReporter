# PySpector Built-in Security Rules
# This is a curated, high-quality ruleset focusing on high-impact vulnerabilities.

# -------------------------------------------
# SECTION: Taint Analysis Rules
# -------------------------------------------

[[taint_source]]
id = "TS001"
description = "Data from a web request is considered tainted."
function_call = "request.get"
taint_target = "return"

[[taint_sink]]
id = "SK001"
vulnerability_id = "PY102" # This sink triggers the high-confidence Command Injection rule
description = "Data is passed to a command execution function."
function_call = "subprocess.run"
vulnerable_parameter_index = 0

[[taint_sanitizer]]
id = "SN001"
description = "Shell argument escaping sanitizes data for command execution."
function_call = "shlex.quote"

# -------------------------------------------
# SECTION: Injection (OWASP A03:2021)
# -------------------------------------------

[[rule]]
id = "PY102"
description = "Command Injection detected via Taint Analysis."
severity = "Critical"
confidence = "High"
remediation = "User-controlled data reached a command execution function without sanitization. Use 'shlex.quote()' to escape arguments or avoid passing user input to shell commands entirely."
# NOTE: This rule has no 'pattern' or 'ast_match'. It is triggered ONLY by the taint engine.

[[rule]]
id = "PY001"
description = "Use of 'eval()' is highly dangerous."
severity = "High"
remediation = "Avoid 'eval()'. Use safer alternatives like 'ast.literal_eval' for data parsing."
ast_match = "Call(func.id=eval)"
file_pattern = "*.py"

[[rule]]
id = "PY103"
description = "Use of os.system is a command injection risk."
severity = "High"
remediation = "Avoid 'os.system'. Use the 'subprocess' module with command and arguments as a list."
ast_match = "Call(func.value.id=os, func.attr=system)"
file_pattern = "*.py"

[[rule]]
id = "PY101"
description = "Potential SQL injection via string formatting in database query."
severity = "Critical"
confidence = "High"
remediation = "Use parameterized queries (e.g., cursor.execute('SELECT * FROM users WHERE name = ?', (name,))) instead of string formatting."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY104"
description = "LDAP injection may be possible with string formatting."
severity = "High"
remediation = "Use a proper LDAP escaping library for any user-controlled data in LDAP queries."
pattern = "\\.search_s\\s*\\(.*f[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY105"
description = "Potential XSS vulnerability with mark_safe or Markup."
severity = "Medium"
remediation = "Ensure that data passed to 'mark_safe' or 'Markup' is from a trusted source or has been properly sanitized."
pattern = "(mark_safe|Markup)\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "PY106"
description = "Use of subprocess.run with shell=True is a command injection risk."
severity = "High"
remediation = "Avoid shell=True with subprocess.run. Pass commands as a list instead of a string."
ast_match = "Call(func.value.id=subprocess, func.attr=run)"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Cryptographic Failures (OWASP A02:2021)
# -------------------------------------------

[[rule]]
id = "PY201"
description = "Use of weak hashing algorithm MD5."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256 or a password-specific hashing function like bcrypt."
ast_match = "Call(func.value.id=hashlib, func.attr=md5)"
file_pattern = "*.py"

[[rule]]
id = "PY202"
description = "Use of broken hashing algorithm SHA1."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256."
ast_match = "Call(func.value.id=hashlib, func.attr=sha1)"
file_pattern = "*.py"

[[rule]]
id = "PY203"
description = "Use of insecure SSL/TLS protocol version."
severity = "High"
remediation = "Use 'ssl.PROTOCOL_TLS' or higher. Avoid SSLv2, SSLv3, and TLSv1.0/1.1."
pattern = "ssl\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)"
file_pattern = "*.py"

[[rule]]
id = "PY204"
description = "Use of the 'pycrypto' library is discouraged due to known vulnerabilities."
severity = "High"
remediation = "Migrate from 'pycrypto' to a more secure and actively maintained library like 'pycryptodome'."
pattern = "from\\s+Crypto|import\\s+Crypto"
file_pattern = "*.py"

[[rule]]
id = "PY205"
description = "Use of PyNaCl with low-level functions can be insecure if misused."
severity = "Low"
confidence = "Low"
remediation = "Prefer using high-level APIs like 'Box' and 'SecretBox' unless low-level functions are explicitly required and understood."
pattern = "nacl\\.low_level"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Insecure Deserialization & Design (OWASP A08:2021)
# -------------------------------------------

[[rule]]
id = "PY002"
description = "Use of 'pickle.loads' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data."
ast_match = "Call(func.value.id=pickle, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "PY301"
description = "Use of 'pickle.load' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data."
ast_match = "Call(func.attr=load, func.value.id=pickle)"
file_pattern = "*.py"

[[rule]]
id = "PY302"
description = "Use of 'yaml.load()' is insecure. Use 'yaml.safe_load()'."
severity = "High"
remediation = "Always use 'yaml.safe_load()' to prevent arbitrary code execution from malicious YAML."
pattern = "^\\s*[^#]*yaml\\.load" # This regex ignores comment lines
file_pattern = "*.py"

[[rule]]
id = "PY303"
description = "XML parsing with 'xml.etree.ElementTree' is vulnerable to XML bombs."
severity = "High"
remediation = "Use 'defusedxml.ElementTree' to parse untrusted XML data safely."
pattern = "xml\\.etree\\.ElementTree\\.(parse|fromstring)"
file_pattern = "*.py"

[[rule]]
id = "PY304"
description = "Insecure temporary file creation may lead to race conditions."
severity = "Medium"
remediation = "Use 'tempfile.mkstemp()' instead of 'tempfile.mktemp()' for secure temporary file creation."
pattern = "tempfile\\.mktemp"
file_pattern = "*.py"

[[rule]]
id = "PY305"
description = "Use of exec() enables arbitrary code execution"
severity = "Critical"
ast_match = "Call(func.id=exec)"

[[rule]]
id = "PY306"  
description = "Unsafe pickle.loads() can execute arbitrary code"
severity = "High"
ast_match = "Call(func.value.id=pickle, func.attr=loads)"

# -------------------------------------------
# SECTION: Security Misconfiguration (OWASP A05:2021)
# -------------------------------------------

[[rule]]
id = "G401"
description = "Flask app is running with the development server in a non-debug context."
severity = "Medium"
confidence = "Low"
remediation = "Use a production-ready WSGI server like Gunicorn or uWSGI instead of 'app.run()'."
pattern = "app\\.run\\(host=.*0\\.0\\.0\\.0"
file_pattern = "*.py"

[[rule]]
id = "G402"
description = "Django DEBUG mode is enabled in a settings file."
severity = "High"
remediation = "Ensure DEBUG is set to False in production settings."
pattern = "^\\s*DEBUG\\s*=\\s*True"
file_pattern = "*settings*.py"

[[rule]]
id = "G403"
description = "Flask DEBUG mode is enabled."
severity = "High"
remediation = "Ensure app.debug is False or the DEBUG config variable is False in production."
pattern = "app\\.run\\(.*debug=True"
file_pattern = "*.py"

[[rule]]
id = "G404"
description = "Django's CSRF protection appears to be disabled globally."
severity = "Critical"
remediation = "Ensure 'django.middleware.csrf.CsrfViewMiddleware' is active in your MIDDLEWARE setting."
pattern = "#.*CsrfViewMiddleware" # Simple check for commented-out middleware
file_pattern = "*settings*.py"

[[rule]]
id = "G405"
description = "Requests made without certificate verification."
severity = "High"
remediation = "Remove 'verify=False' from requests calls to prevent man-in-the-middle attacks."
ast_match = "Call(keywords.*.arg=verify, keywords.*.value.value=False)"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Hardcoded Secrets (OWASP A07:2021)
# -------------------------------------------

[[rule]]
id = "G101"
description = "Hardcoded password or secret detected."
severity = "High"
confidence = "Medium"
remediation = "Store credentials in environment variables or a secrets management system."
pattern = "(?i)(password|secret|api_key|token|authkey|bearer|cred|credentials)\\s*[:=]\\s*[\"']\\w{8,}[\"']"
file_pattern = "*.py"

[[rule]]
id = "G102"
description = "Hardcoded private key detected."
severity = "Critical"
confidence = "High"
remediation = "Load private keys from a secure, encrypted file or secrets manager."
pattern = "-----BEGIN (RSA|EC|OPENSSH|PGP) PRIVATE KEY-----"

[[rule]]
id = "G103"
description = "Use of a blank password for a user or service."
severity = "High"
remediation = "Ensure all users and service accounts have strong, non-empty passwords."
pattern = "(?i)(password|passwd|pass)\\s*[:=]\\s*[\"']\\s*[\"']"
file_pattern = "*.py"

[[rule]]
id = "G104"
description = "JWT secret is hardcoded."
severity = "Critical"
remediation = "Load JWT secrets from environment variables or a secrets management system."
pattern = "(?i)(jwt_secret|jwt_key)\\s*[:=]\\s*[\"'].+[\"']"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: IaC and Configuration File Security
# -------------------------------------------

[[rule]]
id = "DKR001"
description = "Password or secret found in Dockerfile ENV instruction."
severity = "High"
remediation = "Use build-time arguments (ARG) with the --secret flag or a secrets management tool."
pattern = "(?i)ENV\\s+(PASS|PASSWORD|SECRET|TOKEN|API_KEY)\\s+"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR002"
description = "Use of 'latest' tag for base image is not recommended for production."
severity = "Low"
remediation = "Pin base images to a specific version digest for reproducible and secure builds."
pattern = "FROM\\s+\\w+:latest"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR003"
description = "Exposing Docker daemon socket inside a container is a security risk."
severity = "Critical"
remediation = "Avoid mounting '/var/run/docker.sock' into containers."
pattern = "/var/run/docker\\.sock"
file_pattern = "docker-compose*.y*ml"

[[rule]]
id = "K8S001"
description = "Kubernetes container running in privileged mode."
severity = "Critical"
remediation = "Set 'securityContext.privileged' to 'false' or remove it."
pattern = "privileged:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "K8S002"
description = "Kubernetes container allows privilege escalation."
severity = "High"
remediation = "Explicitly set 'securityContext.allowPrivilegeEscalation' to 'false'."
pattern = "allowPrivilegeEscalation:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "TF001"
description = "Terraform AWS S3 bucket is publicly readable."
severity = "Critical"
remediation = "Set the 'acl' property of 'aws_s3_bucket' to 'private', not 'public-read' or 'public-read-write'."
pattern = "acl\\s*=\\s*\"(public-read|public-read-write)\""
file_pattern = "*.tf"

[[rule]]
id = "CFG001"
description = "AWS credentials detected in configuration file."
severity = "Critical"
remediation = "Use IAM roles or environment variables for AWS credentials."
pattern = "(?i)(aws_access_key_id|aws_secret_access_key)\\s*=\\s*[A-Za-z0-9/+=]{20,}"
file_pattern = "*.ini"

# -------------------------------------------
# SECTION: ADDITIONAL SECURITY RULES
# -------------------------------------------

[[rule]]
id = "PY500"
description = "Dynamic code execution using builtins.exec() function."
severity = "High"
confidence = "Medium"
remediation = "Avoid dynamic code execution. Consider safer alternatives or validate input thoroughly."
ast_match = "Call(func.attr=exec, func.value.id=builtins)"
file_pattern = "*.py"

[[rule]]
id = "SEC501"
description = "Generic exec pattern detected in code."
severity = "Medium"
confidence = "Medium"
remediation = "Dynamic code execution can be dangerous. Validate all inputs and consider safer alternatives."
pattern = "\\bexec\\b\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "SEC502"
description = "Subprocess Popen with shell=True detected."
severity = "Medium"
confidence = "Medium"
remediation = "Using shell=True with subprocess.Popen can lead to command injection. Use argument lists instead."
ast_match = "Call(func.value.id=subprocess, func.attr=Popen, keywords.*.arg=shell, keywords.*.value.value=True)"
file_pattern = "*.py"

[[rule]]
id = "PY503"
description = "Shell command execution with user-controllable input."
severity = "Low"
confidence = "Medium"
remediation = "Avoid using shell=True with subprocess calls. Use argument arrays for safer command execution."
pattern = "subprocess\\.(Popen|call)\\(.*shell\\s*=\\s*True"
file_pattern = "*.py"

[[rule]]
id = "SEC504"
description = "Reading sensitive system file /etc/passwd."
severity = "Low"
remediation = "Accessing system password files should be done with proper authorization checks."
pattern = "open\\s*\\(\\s*['\\\"]/etc/passwd"
file_pattern = "*.sh"

[[rule]]
id = "PY505"
description = "File reading operation using open().read() pattern."
severity = "High"
remediation = "Ensure file access controls and validate file paths to prevent unauthorized access."
ast_match = "Attribute(attr=read, value.func.id=open)"
file_pattern = "*.py"

[[rule]]
id = "JS506"
description = "JavaScript eval() function usage detected."
severity = "Medium"
remediation = "Avoid using eval() in JavaScript. Use JSON.parse() for data or safer alternatives."
pattern = "eval\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "PY507"
description = "Method call to exec function detected."
severity = "Critical"
remediation = "Method-based exec calls can execute arbitrary code. Validate inputs and use safer alternatives."
pattern = "\\.exec\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "WEB508"
description = "Insecure Content Security Policy with unsafe-inline."
severity = "Medium"
confidence = "Medium"
remediation = "Remove unsafe-inline from CSP directives and use nonces or hashes instead."
pattern = "Content-Security-Policy\\s*:\\s*.*unsafe-inline"
file_pattern = "*.conf"

[[rule]]
id = "JS509"
description = "Dynamic function creation using Function constructor."
severity = "Low"
remediation = "Function constructor can execute arbitrary code. Use predefined functions or validate inputs."
pattern = "new\\s+Function\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "CFG510"
description = "AWS access key detected in configuration."
severity = "Low"
remediation = "Store AWS credentials securely using IAM roles or environment variables."
pattern = "aws_access_key_id\\s*[:=]\\s*['\\\"][A-Za-z0-9/+=]{16,}"
file_pattern = "*.ini"

[[rule]]
id = "PY511"
description = "JSON deserialization without validation."
severity = "High"
remediation = "Validate JSON data before processing and implement schema validation."
ast_match = "Call(func.value.id=json, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "WEB512"
description = "Bearer token in configuration header."
severity = "Medium"
remediation = "Store authentication tokens securely and avoid hardcoding in configuration files."
pattern = "Authorization\\s*:\\s*\\bBearer\\b"
file_pattern = "*.conf"

[[rule]]
id = "DJG513"
description = "Django CSRF protection bypass detected."
severity = "Low"
remediation = "Do not use csrf_exempt decorator unless absolutely necessary and with proper justification."
pattern = "csrf_exempt"
file_pattern = "*.py"

[[rule]]
id = "WEB514"
description = "X-Frame-Options set to allow framing."
severity = "Medium"
remediation = "Set X-Frame-Options to DENY or SAMEORIGIN to prevent clickjacking attacks."
pattern = "X-Frame-Options\\s*:\\s*ALLOW"
file_pattern = "*.conf"

[[rule]]
id = "PY515"
description = "Code compilation using compile() function."
severity = "High"
remediation = "Dynamic code compilation can be dangerous. Validate all inputs and consider static alternatives."
ast_match = "Call(func.attr=compile)"
file_pattern = "*.py"

[[rule]]
id = "DOM516"
description = "DOM manipulation using document.write()."
severity = "Medium"
remediation = "Use safer DOM manipulation methods like createElement() and appendChild()."
pattern = "document\\.write\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "XSS517"
description = "InnerHTML assignment detected."
severity = "Low"
remediation = "Using innerHTML can lead to XSS vulnerabilities. Use textContent or createElement instead."
pattern = "innerHTML\\s*="
file_pattern = "*.html"

[[rule]]
id = "PY518"
description = "Subprocess execution with shell parameter enabled."
severity = "High"
confidence = "Medium"
remediation = "Disable shell parameter or validate all inputs to prevent command injection."
ast_match = "Call(func.value.id=subprocess, func.attr=Popen, keywords.*.arg=shell, keywords.*.value.value=True)"
file_pattern = "*.py"

[[rule]]
id = "TIME519"
description = "JavaScript setTimeout with string parameter."
severity = "Low"
remediation = "Pass function references to setTimeout instead of string code."
pattern = "setTimeout\\s*\\(\\s*['\\\"]"
file_pattern = "*.js"

[[rule]]
id = "DB520"
description = "Mongoose query construction detected."
severity = "Medium"
remediation = "Use parameterized queries to prevent NoSQL injection attacks."
pattern = "mongoose\\.query\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "SER522"
description = "Object serialization function detected."
severity = "Low"
remediation = "Ensure serialized data comes from trusted sources to prevent deserialization attacks."
pattern = "\\bserialize\\b\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "NODE525"
description = "Node.js child_process module import."
severity = "Low"
remediation = "Child process execution can be dangerous. Validate all inputs and limit functionality."
pattern = "require\\s*\\(.*child_process"
file_pattern = "*.js"

[[rule]]
id = "FILE526"
description = "File read operation using open attribute access."
severity = "Medium"
remediation = "Implement proper file access controls and validate file paths."
ast_match = "Attribute(attr=read, value.id=open)"
file_pattern = "*.py"

[[rule]]
id = "PERM527"
description = "Setting overly permissive file permissions (777)."
severity = "High"
remediation = "Use more restrictive permissions. Consider 644 for files and 755 for directories."
pattern = "chmod\\s+777"
file_pattern = "*.sh"

[[rule]]
id = "FILE528"
description = "Direct access to system password file."
severity = "High"
confidence = "Medium"
remediation = "Accessing /etc/passwd should be done through proper system APIs with authorization."
pattern = "open\\s*\\(\\s*['\\\"]/etc/passwd"
file_pattern = "*.py"

[[rule]]
id = "TEMP529"
description = "Insecure temporary file creation using mktemp -u."
severity = "Low"
remediation = "Use mktemp without -u flag or mkstemp for secure temporary file creation."
pattern = "mktemp\\s+-u"
file_pattern = "*.sh"

[[rule]]
id = "SSL531"
description = "SSL/TLS certificate verification disabled."
severity = "Medium"
remediation = "Enable certificate verification to prevent man-in-the-middle attacks."
pattern = "verify\\s*:\\s*false"
file_pattern = "*.y*ml"

[[rule]]
id = "CRYPTO532"
description = "Deprecated SSL/TLS protocol version usage."
severity = "Medium"
remediation = "Use TLS 1.2 or higher. Avoid deprecated SSL and early TLS versions."
pattern = "ssl\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)"
file_pattern = "*.py"

[[rule]]
id = "PERM568"
description = "File permission change to world-writable detected."
severity = "High"
confidence = "Medium"
remediation = "Avoid setting world-writable permissions. Use more restrictive file access controls."
pattern = "chmod\\s+777"
file_pattern = "*.sh"

[[rule]]
id = "WEB575"
description = "Content Security Policy allows unsafe inline execution."
severity = "High"
confidence = "Medium"
remediation = "Remove unsafe-inline from CSP directives and implement nonce-based or hash-based CSP."
pattern = "Content-Security-Policy\\s*:\\s*.*unsafe-inline"
file_pattern = "*.conf"

[[rule]]
id = "SQL586"
description = "String formatting in SQL query execution."
severity = "Critical"
confidence = "Medium"
remediation = "Use parameterized queries instead of string formatting to prevent SQL injection."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "FUNC596"
description = "JavaScript Function constructor usage."
severity = "Critical"
confidence = "Medium"
remediation = "Avoid Function constructor as it can execute arbitrary code. Use predefined functions."
pattern = "new\\s+Function\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "SHELL602"
description = "Shell command execution with dynamic arguments."
severity = "High"
confidence = "Medium"
remediation = "Use subprocess with argument arrays instead of shell command strings."
pattern = "subprocess\\.(Popen|call)\\(.*shell\\s*=\\s*True"
file_pattern = "*.py"

[[rule]]
id = "CODE607"
description = "Content Security Policy with unsafe inline directives."
severity = "High"
confidence = "Medium"
remediation = "Implement strict CSP without unsafe-inline to prevent XSS attacks."
pattern = "Content-Security-Policy\\s*:\\s*.*unsafe-inline"
file_pattern = "*.conf"

[[rule]]
id = "JSON612"
description = "JSON parsing without input validation."
severity = "High"
confidence = "Medium"
remediation = "Implement JSON schema validation and sanitize input data before parsing."
ast_match = "Call(func.value.id=json, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "YAML619"
description = "Shell execution in subprocess with dynamic input."
severity = "High"
confidence = "Medium"
remediation = "Use argument lists with subprocess to prevent command injection attacks."
pattern = "subprocess\\.(Popen|call)\\(.*shell\\s*=\\s*True"
file_pattern = "*.py"

[[rule]]
id = "SHELL631"
description = "SQL injection vulnerability in database query."
severity = "Critical"
confidence = "Medium"
remediation = "Use parameterized queries with placeholders instead of string concatenation."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "JS635"
description = "Dynamic function creation in JavaScript."
severity = "High"
confidence = "Medium"
remediation = "Avoid Function constructor to prevent code injection. Use predefined function references."
pattern = "new\\s+Function\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "CSP640"
description = "Unsafe Content Security Policy configuration."
severity = "High"
confidence = "Medium"
remediation = "Configure CSP without unsafe-inline and unsafe-eval directives."
pattern = "Content-Security-Policy\\s*:\\s*.*unsafe-inline"
file_pattern = "*.conf"

[[rule]]
id = "SHELL645"
description = "Dynamic code compilation with user input."
severity = "High"
confidence = "Medium"
remediation = "Avoid compile() function with untrusted input. Use static code analysis instead."
ast_match = "Call(func.attr=compile)"
file_pattern = "*.py"

[[rule]]
id = "PERM650"
description = "SQL query with potential injection vulnerability."
severity = "Critical"
confidence = "Medium"
remediation = "Implement prepared statements and parameterized queries to prevent SQL injection."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "JS655"
description = "Dynamic function constructor in JavaScript code."
severity = "High"
confidence = "Medium"
remediation = "Replace Function constructor with safer alternatives to prevent code injection."
pattern = "new\\s+Function\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "SHELL660"
description = "Process execution with shell parameter enabled."
severity = "High"
confidence = "Medium"
remediation = "Use subprocess without shell parameter and pass arguments as a list."
pattern = "subprocess\\.(Popen|call)\\(.*shell\\s*=\\s*True"
file_pattern = "*.py"

[[rule]]
id = "CSP665"
description = "Insecure Content Security Policy allowing inline scripts."
severity = "High"
confidence = "Medium"
remediation = "Use nonce or hash-based CSP instead of unsafe-inline directive."
pattern = "Content-Security-Policy\\s*:\\s*.*unsafe-inline"
file_pattern = "*.conf"

[[rule]]
id = "SHELL670"
description = "Code compilation function usage."
severity = "High"
confidence = "Medium"
remediation = "Avoid dynamic code compilation. Consider static analysis or predefined code patterns."
ast_match = "Call(func.attr=compile)"
file_pattern = "*.py"

[[rule]]
id = "SHELL675"
description = "Database query with string interpolation."
severity = "Critical"
confidence = "Medium"
remediation = "Use ORM methods or prepared statements instead of string formatting in SQL queries."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "PERM679"
description = "Subprocess call with shell execution enabled."
severity = "High"
confidence = "Medium"
remediation = "Disable shell parameter in subprocess calls to prevent command injection."
ast_match = "Call(func.value.id=subprocess, func.attr=Popen, keywords.*.arg=shell, keywords.*.value.value=True)"
file_pattern = "*.py"

[[rule]]
id = "DOM683"
description = "DOM write operation using document.write."
severity = "High"
confidence = "Medium"
remediation = "Use modern DOM manipulation methods instead of document.write to prevent XSS."
pattern = "document\\.write\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "SHELL689"
description = "Process creation with shell command execution."
severity = "High"
confidence = "Medium"
remediation = "Use process execution without shell to avoid command injection vulnerabilities."
pattern = "subprocess\\.(Popen|call)\\(.*shell\\s*=\\s*True"
file_pattern = "*.py"

[[rule]]
id = "SQL693"
description = "String formatting in database execute statement."
severity = "Critical"
confidence = "Medium"
remediation = "Implement parameterized queries to eliminate SQL injection risks."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "DOM697"
description = "Direct DOM manipulation using document.write method."
severity = "High"
confidence = "Medium"
remediation = "Use createElement and appendChild methods for safer DOM manipulation."
pattern = "document\\.write\\s*\\("
file_pattern = "*.js"

[[rule]]
id = "PERM702"
description = "File permission modification to world-accessible."
severity = "High"
confidence = "Medium"
remediation = "Set appropriate file permissions. Avoid 777 permissions on production systems."
pattern = "chmod\\s+777"
file_pattern = "*.sh"

[[rule]]
id = "NET705"
description = "Network request without SSL certificate verification."
severity = "High"
confidence = "Medium"
remediation = "Enable SSL certificate verification to prevent man-in-the-middle attacks."
pattern = "requests\\.(get|post|put|delete)\\(.*verify\\s*=\\s*False"
file_pattern = "*.py"

[[rule]]
id = "CRYPTO708"
description = "Weak cryptographic key generation detected."
severity = "Medium"
confidence = "Medium"
remediation = "Use cryptographically secure random number generators for key generation."
pattern = "random\\.(randint|random)\\("
file_pattern = "*.py"

[[rule]]
id = "AUTH711"
description = "Authentication bypass using hardcoded credentials."
severity = "Critical"
confidence = "High"
remediation = "Implement proper authentication mechanisms without hardcoded credentials."
pattern = "(?i)(username|user)\\s*[:=]\\s*[\"']admin[\"']"
file_pattern = "*.py"

[[rule]]
id = "XSS714"
description = "Cross-site scripting vulnerability in template rendering."
severity = "High"
confidence = "Medium"
remediation = "Use template engines with automatic escaping or manually escape user input."
pattern = "\\|safe\\b"
file_pattern = "*.html"

[[rule]]
id = "LDAP717"
description = "LDAP injection vulnerability in search filter."
severity = "High"
confidence = "Medium"
remediation = "Properly escape LDAP filter characters or use parameterized LDAP queries."
pattern = "\\.search\\(.*filter.*%s"
file_pattern = "*.py"

[[rule]]
id = "XPATH720"
description = "XPath injection vulnerability detected."
severity = "High"
confidence = "Medium"
remediation = "Use parameterized XPath queries or properly escape user input."
pattern = "xpath\\(.*%s"
file_pattern = "*.py"

[[rule]]
id = "DESER723"
description = "Unsafe deserialization of untrusted data."
severity = "Critical"
confidence = "High"
remediation = "Validate and sanitize data before deserialization or use safer formats."
ast_match = "Call(func.value.id=marshal, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "PRIV726"
description = "Privilege escalation through setuid binary execution."
severity = "High"
confidence = "Medium"
remediation = "Avoid executing setuid binaries or implement proper privilege checks."
pattern = "os\\.setuid\\("
file_pattern = "*.py"

[[rule]]
id = "RACE729"
description = "Race condition in file operations."
severity = "Medium"
confidence = "Low"
remediation = "Use atomic file operations or proper locking mechanisms."
pattern = "os\\.path\\.exists.*open\\("
file_pattern = "*.py"

[[rule]]
id = "MEM732"
description = "Memory exhaustion through unbounded data structure."
severity = "Medium"
confidence = "Low"
remediation = "Implement size limits on data structures to prevent memory exhaustion."
pattern = "\\[\\]\\s*\\*\\s*\\w+"
file_pattern = "*.py"

[[rule]]
id = "DIR735"
description = "Directory traversal vulnerability in file path."
severity = "High"
confidence = "Medium"
remediation = "Validate and sanitize file paths to prevent directory traversal attacks."
pattern = "\\.\\./|\\.\\.\\\\|%2e%2e%2f"
file_pattern = "*.py"

[[rule]]
id = "INFO738"
description = "Information disclosure through error messages."
severity = "Low"
confidence = "Low"
remediation = "Implement generic error messages that don't reveal system information."
pattern = "traceback\\.print_exc\\("
file_pattern = "*.py"

[[rule]]
id = "LOG741"
description = "Log injection vulnerability detected."
severity = "Medium"
confidence = "Medium"
remediation = "Sanitize user input before logging to prevent log injection attacks."
pattern = "logging\\.(info|debug|warning|error)\\(.*%s"
file_pattern = "*.py"

[[rule]]
id = "SESS744"
description = "Session fixation vulnerability in session handling."
severity = "High"
confidence = "Medium"
remediation = "Regenerate session IDs after authentication to prevent fixation attacks."
pattern = "session\\[.*\\]\\s*=.*request\\."
file_pattern = "*.py"

[[rule]]
id = "CSRF747"
description = "Cross-Site Request Forgery protection bypass."
severity = "High"
confidence = "Medium"
remediation = "Implement proper CSRF tokens for state-changing operations."
pattern = "@csrf_exempt"
file_pattern = "*.py"

[[rule]]
id = "HTTP750"
description = "HTTP response splitting vulnerability."
severity = "High"
confidence = "Medium"
remediation = "Validate and sanitize HTTP headers to prevent response splitting."
pattern = "HttpResponse\\(.*\\\\r\\\\n"
file_pattern = "*.py"

[[rule]]
id = "UPLOAD753"
description = "Unrestricted file upload vulnerability."
severity = "High"
confidence = "Medium"
remediation = "Implement file type validation and size limits for uploads."
pattern = "request\\.FILES\\[.*\\]\\.save\\("
file_pattern = "*.py"

[[rule]]
id = "CACHE756"
description = "Cache poisoning vulnerability in HTTP caching."
severity = "Medium"
confidence = "Low"
remediation = "Validate cache keys and implement proper cache invalidation."
pattern = "cache\\.set\\(.*request\\."
file_pattern = "*.py"

[[rule]]
id = "TIMING759"
description = "Timing attack vulnerability in authentication."
severity = "Medium"
confidence = "Low"
remediation = "Use constant-time comparison functions for sensitive operations."
pattern = "password\\s*==\\s*.*"
file_pattern = "*.py"

[[rule]]
id = "ENUM762"
description = "User enumeration vulnerability in login system."
severity = "Low"
confidence = "Low"
remediation = "Return identical responses for valid and invalid usernames."
pattern = "User\\.objects\\.get\\(username="
file_pattern = "*.py"

[[rule]]
id = "BRUTE765"
description = "Missing brute force protection on authentication."
severity = "Medium"
confidence = "Low"
remediation = "Implement rate limiting and account lockout mechanisms."
pattern = "login_required"
file_pattern = "*.py"

[[rule]]
id = "WEAK768"
description = "Weak password policy implementation."
severity = "Low"
confidence = "Low"
remediation = "Implement strong password requirements and validation."
pattern = "len\\(password\\)\\s*<\\s*[1-6]"
file_pattern = "*.py"

[[rule]]
id = "TOKEN771"
description = "JWT token potentially without expiration time (Manual inspection suggested)."
severity = "Medium"
confidence = "Medium"
remediation = "Set appropriate expiration times for JWT tokens."
pattern = "jwt\\.encode\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "OAUTH774"
description = "OAuth state parameter potentially missing in authorization request (Manual inspection suggested)."
severity = "High"
confidence = "Medium"
remediation = "Include state parameter in OAuth flows to prevent CSRF attacks."
pattern = "oauth.*authorize.*"
file_pattern = "*.py"

[[rule]]
id = "API777"
description = "API endpoint without rate limiting."
severity = "Medium"
confidence = "Low"
remediation = "Implement rate limiting on API endpoints to prevent abuse."
pattern = "@app\\.route.*methods.*POST"
file_pattern = "*.py"

[[rule]]
id = "CORS780"
description = "Overly permissive CORS configuration."
severity = "Medium"
confidence = "Medium"
remediation = "Restrict CORS origins to trusted domains only."
pattern = "Access-Control-Allow-Origin\\s*:\\s*\\*"
file_pattern = "*.py"

[[rule]]
id = "CLICK783"
description = "Potential Clickjacking vulnerability due to missing X-Frame-Options (Manual inspection suggested)."
severity = "Medium"
confidence = "Low"
remediation = "Set X-Frame-Options header to DENY or SAMEORIGIN."
pattern = "HttpResponse\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "MIME786"
description = "MIME type sniffing vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Set X-Content-Type-Options header to nosniff."
pattern = "HttpResponse\\(.*content_type="
file_pattern = "*.py"

[[rule]]
id = "HTTPS789"
description = "Missing HTTPS enforcement in security-sensitive context."
severity = "High"
confidence = "Medium"
remediation = "Enforce HTTPS for all security-sensitive operations."
pattern = "SECURE_SSL_REDIRECT\\s*=\\s*False"
file_pattern = "*settings*.py"

[[rule]]
id = "COOKIE792"
description = "Insecure cookie configuration detected."
severity = "Medium"
confidence = "Medium"
remediation = "Set secure and httponly flags on sensitive cookies."
pattern = "set_cookie\\(.*secure=False"
file_pattern = "*.py"

[[rule]]
id = "ADMIN795"
description = "Default admin credentials detected."
severity = "Critical"
confidence = "High"
remediation = "Change default administrative credentials before deployment."
pattern = "(?i)(admin|administrator).*password.*password"
file_pattern = "*.py"

[[rule]]
id = "DEBUG798"
description = "Debug information exposed in production."
severity = "Medium"
confidence = "Medium"
remediation = "Disable debug mode and remove debug statements in production."
pattern = "print\\(.*password\\|.*secret"
file_pattern = "*.py"

[[rule]]
id = "BACKUP801"
description = "Backup file with sensitive information accessible."
severity = "Medium"
confidence = "Low"
remediation = "Secure backup files and exclude them from web-accessible directories."
pattern = "\\.(bak|backup|old|tmp)$"
file_pattern = "*"

[[rule]]
id = "CONFIG804"
description = "Configuration file with default values."
severity = "Low"
confidence = "Low"
remediation = "Change default configuration values before production deployment."
pattern = "(?i)secret_key.*changeme"
file_pattern = "*settings*.py"

[[rule]]
id = "HASH807"
description = "Use of insecure hash function for passwords."
severity = "High"
confidence = "High"
remediation = "Use bcrypt, scrypt, or Argon2 for password hashing."
ast_match = "Call(func.value.id=hashlib, func.attr=sha256)"
file_pattern = "*.py"

[[rule]]
id = "RAND810"
description = "Use of predictable random number generator."
severity = "Medium"
confidence = "Medium"
remediation = "Use cryptographically secure random generators for security purposes."
ast_match = "Call(func.value.id=random, func.attr=choice)"
file_pattern = "*.py"

[[rule]]
id = "PATH813"
description = "Path manipulation vulnerability in file operations."
severity = "High"
confidence = "Medium"
remediation = "Validate and normalize file paths to prevent directory traversal."
pattern = "os\\.path\\.join\\(.*\\.\\."
file_pattern = "*.py"

[[rule]]
id = "SYMLINK816"
description = "Symbolic link vulnerability in file operations."
severity = "Medium"
confidence = "Low"
remediation = "Check for symbolic links and validate target paths."
pattern = "os\\.symlink\\("
file_pattern = "*.py"

[[rule]]
id = "PROC819"
description = "Process injection vulnerability through command execution."
severity = "High"
confidence = "Medium"
remediation = "Validate and sanitize all inputs to process execution functions."
ast_match = "Call(func.value.id=os, func.attr=popen)"
file_pattern = "*.py"

[[rule]]
id = "ENV822"
description = "Environment variable injection vulnerability."
severity = "Medium"
confidence = "Low"
remediation = "Validate environment variables and use allow-lists where possible."
pattern = "os\\.environ\\[.*\\+.*\\]"
file_pattern = "*.py"

[[rule]]
id = "IMPORT825"
description = "Dynamic import vulnerability allowing code execution."
severity = "High"
confidence = "Medium"
remediation = "Avoid dynamic imports with user-controlled input."
ast_match = "Call(func.id=__import__)"
file_pattern = "*.py"

[[rule]]
id = "GETATTR828"
description = "Unsafe use of getattr with user input."
severity = "Medium"
confidence = "Medium"
remediation = "Validate attribute names or use a whitelist of allowed attributes."
ast_match = "Call(func.id=getattr)"
file_pattern = "*.py"

[[rule]]
id = "SETATTR831"
description = "Unsafe use of setattr with user input."
severity = "Medium"
confidence = "Medium"
remediation = "Validate attribute names and values before setting."
ast_match = "Call(func.id=setattr)"
file_pattern = "*.py"

[[rule]]
id = "DELATTR834"
description = "Unsafe use of delattr with user input."
severity = "Medium"
confidence = "Medium"
remediation = "Validate attribute names before deletion."
ast_match = "Call(func.id=delattr)"
file_pattern = "*.py"

[[rule]]
id = "HASATTR837"
description = "Information disclosure through hasattr probing."
severity = "Low"
confidence = "Low"
remediation = "Limit attribute access or implement access controls."
ast_match = "Call(func.id=hasattr)"
file_pattern = "*.py"

[[rule]]
id = "VARS840"
description = "Information disclosure through vars() function."
severity = "Low"
confidence = "Low"
remediation = "Avoid exposing internal object state through vars()."
ast_match = "Call(func.id=vars)"
file_pattern = "*.py"

[[rule]]
id = "GLOBALS843"
description = "Access to global namespace through globals()."
severity = "Medium"
confidence = "Medium"
remediation = "Restrict access to global namespace in untrusted contexts."
ast_match = "Call(func.id=globals)"
file_pattern = "*.py"

[[rule]]
id = "LOCALS846"
description = "Access to local namespace through locals()."
severity = "Low"
confidence = "Low"
remediation = "Be cautious when exposing local variables."
ast_match = "Call(func.id=locals)"
file_pattern = "*.py"

[[rule]]
id = "DIR849"
description = "Information disclosure through dir() function."
severity = "Low"
confidence = "Low"
remediation = "Limit use of dir() in contexts accessible to untrusted users."
ast_match = "Call(func.id=dir)"
file_pattern = "*.py"

[[rule]]
id = "TYPE852"
description = "Type confusion vulnerability through type manipulation."
severity = "Low"
confidence = "Low"
remediation = "Validate object types before operations."
ast_match = "Call(func.id=type)"
file_pattern = "*.py"

[[rule]]
id = "ISINSTANCE855"
description = "Type checking bypass through isinstance manipulation."
severity = "Low"
confidence = "Low"
remediation = "Use additional validation beyond isinstance checks."
ast_match = "Call(func.id=isinstance)"
file_pattern = "*.py"

[[rule]]
id = "REPR858"
description = "Information disclosure through repr() function."
severity = "Low"
confidence = "Low"
remediation = "Avoid using repr() on sensitive objects in user-facing contexts."
ast_match = "Call(func.id=repr)"
file_pattern = "*.py"

[[rule]]
id = "STR861"
description = "Potential information disclosure through str() conversion."
severity = "Low"
confidence = "Low"
remediation = "Control string representations of sensitive objects."
ast_match = "Call(func.id=str)"
file_pattern = "*.py"

[[rule]]
id = "FORMAT864"
description = "Format string vulnerability in string formatting."
severity = "Medium"
confidence = "Medium"
remediation = "Use safe string formatting methods and validate format strings."
ast_match = "Call(func.attr=format)"
file_pattern = "*.py"

[[rule]]
id = "FSTRING867"
description = "Potential code injection through f-string formatting."
severity = "Medium"
confidence = "Low"
remediation = "Validate and sanitize data used in f-string expressions."
pattern = "f[\"'][^\"']*\\{.*\\}[^\"']*[\"']"
file_pattern = "*.py"

[[rule]]
id = "REGEX870"
description = "Regular expression denial of service (ReDoS) vulnerability."
severity = "Medium"
confidence = "Low"
remediation = "Avoid nested quantifiers and catastrophic backtracking in regex."
pattern = "re\\.(match|search|findall)\\(.*\\(.*\\+.*\\*"
file_pattern = "*.py"

[[rule]]
id = "SPLIT873"
description = "Potential DoS through string split operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the number of splits or validate input size."
pattern = "\\.split\\(.*maxsplit"
file_pattern = "*.py"

[[rule]]
id = "JOIN876"
description = "Memory exhaustion through string join operations."
severity = "Low"
confidence = "Low"
remediation = "Validate the size of collections before joining."
ast_match = "Call(func.attr=join)"
file_pattern = "*.py"

[[rule]]
id = "REPLACE879"
description = "Potential DoS through string replace operations."
severity = "Low"
confidence = "Low"
remediation = "Limit replacement operations on large strings."
ast_match = "Call(func.attr=replace)"
file_pattern = "*.py"

[[rule]]
id = "DECODE882"
description = "Encoding vulnerability in string decode operations."
severity = "Low"
confidence = "Low"
remediation = "Handle encoding errors properly and validate input."
ast_match = "Call(func.attr=decode)"
file_pattern = "*.py"

[[rule]]
id = "ENCODE885"
description = "Information disclosure through string encoding."
severity = "Low"
confidence = "Low"
remediation = "Be careful when encoding sensitive data."
ast_match = "Call(func.attr=encode)"
file_pattern = "*.py"

[[rule]]
id = "LOWER888"
description = "Locale-dependent case conversion vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Use locale-independent case conversion for security comparisons."
ast_match = "Call(func.attr=lower)"
file_pattern = "*.py"

[[rule]]
id = "UPPER891"
description = "Locale-dependent case conversion vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Use locale-independent case conversion for security comparisons."
ast_match = "Call(func.attr=upper)"
file_pattern = "*.py"

[[rule]]
id = "STRIP894"
description = "Unicode normalization bypass in string stripping."
severity = "Low"
confidence = "Low"
remediation = "Normalize Unicode strings before validation."
ast_match = "Call(func.attr=strip)"
file_pattern = "*.py"

[[rule]]
id = "STARTSWITH897"
description = "Bypass vulnerability in string prefix checking."
severity = "Low"
confidence = "Low"
remediation = "Normalize and validate strings before prefix checks."
ast_match = "Call(func.attr=startswith)"
file_pattern = "*.py"

[[rule]]
id = "ENDSWITH900"
description = "Bypass vulnerability in string suffix checking."
severity = "Low"
confidence = "Low"
remediation = "Normalize and validate strings before suffix checks."
ast_match = "Call(func.attr=endswith)"
file_pattern = "*.py"

[[rule]]
id = "FIND903"
description = "Logic error in string search operations."
severity = "Low"
confidence = "Low"
remediation = "Handle -1 return value from find() properly."
ast_match = "Call(func.attr=find)"
file_pattern = "*.py"

[[rule]]
id = "INDEX906"
description = "Exception handling bypass in string index operations."
severity = "Low"
confidence = "Low"
remediation = "Use find() instead of index() or handle exceptions properly."
ast_match = "Call(func.attr=index)"
file_pattern = "*.py"

[[rule]]
id = "COUNT909"
description = "DoS vulnerability through string count operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the size of strings used in count operations."
ast_match = "Call(func.attr=count)"
file_pattern = "*.py"

[[rule]]
id = "TRANSLATE912"
description = "Character encoding bypass through translate operations."
severity = "Low"
confidence = "Low"
remediation = "Validate translation tables and input strings."
ast_match = "Call(func.attr=translate)"
file_pattern = "*.py"

[[rule]]
id = "MAKETRANS915"
description = "Translation table manipulation vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Validate translation mappings for security contexts."
ast_match = "Call(func.attr=maketrans)"
file_pattern = "*.py"

[[rule]]
id = "CASEFOLD918"
description = "Unicode normalization vulnerability in casefold operations."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode normalization effects in security contexts."
ast_match = "Call(func.attr=casefold)"
file_pattern = "*.py"

[[rule]]
id = "EXPANDTABS921"
description = "Tab expansion DoS vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Limit tab expansion or validate input size."
ast_match = "Call(func.attr=expandtabs)"
file_pattern = "*.py"

[[rule]]
id = "ZFILL924"
description = "Memory exhaustion through zero-fill operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the width parameter in zfill operations."
ast_match = "Call(func.attr=zfill)"
file_pattern = "*.py"

[[rule]]
id = "CENTER927"
description = "Memory exhaustion through string centering operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the width parameter in center operations."
ast_match = "Call(func.attr=center)"
file_pattern = "*.py"

[[rule]]
id = "LJUST930"
description = "Memory exhaustion through string justification operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the width parameter in ljust operations."
ast_match = "Call(func.attr=ljust)"
file_pattern = "*.py"

[[rule]]
id = "RJUST933"
description = "Memory exhaustion through string justification operations."
severity = "Low"
confidence = "Low"
remediation = "Limit the width parameter in rjust operations."
ast_match = "Call(func.attr=rjust)"
file_pattern = "*.py"

[[rule]]
id = "PARTITION936"
description = "Logic error in string partition operations."
severity = "Low"
confidence = "Low"
remediation = "Validate partition results and handle edge cases."
ast_match = "Call(func.attr=partition)"
file_pattern = "*.py"

[[rule]]
id = "RPARTITION939"
description = "Logic error in string reverse partition operations."
severity = "Low"
confidence = "Low"
remediation = "Validate rpartition results and handle edge cases."
ast_match = "Call(func.attr=rpartition)"
file_pattern = "*.py"

[[rule]]
id = "RSPLIT942"
description = "Logic error in reverse string split operations."
severity = "Low"
confidence = "Low"
remediation = "Validate rsplit results and handle maxsplit parameter."
ast_match = "Call(func.attr=rsplit)"
file_pattern = "*.py"

[[rule]]
id = "SPLITLINES945"
description = "Line ending normalization vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Be aware of different line ending interpretations."
ast_match = "Call(func.attr=splitlines)"
file_pattern = "*.py"

[[rule]]
id = "SWAPCASE948"
description = "Locale-dependent case swapping vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Avoid swapcase in security-sensitive contexts."
ast_match = "Call(func.attr=swapcase)"
file_pattern = "*.py"

[[rule]]
id = "TITLE951"
description = "Locale-dependent title casing vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Use consistent title casing for security comparisons."
ast_match = "Call(func.attr=title)"
file_pattern = "*.py"

[[rule]]
id = "CAPITALIZE954"
description = "Locale-dependent capitalization vulnerability."
severity = "Low"
confidence = "Low"
remediation = "Use consistent capitalization for security comparisons."
ast_match = "Call(func.attr=capitalize)"
file_pattern = "*.py"

[[rule]]
id = "LSTRIP957"
description = "Unicode normalization bypass in left string stripping."
severity = "Low"
confidence = "Low"
remediation = "Normalize Unicode strings before validation."
ast_match = "Call(func.attr=lstrip)"
file_pattern = "*.py"

[[rule]]
id = "RSTRIP960"
description = "Unicode normalization bypass in right string stripping."
severity = "Low"
confidence = "Low"
remediation = "Normalize Unicode strings before validation."
ast_match = "Call(func.attr=rstrip)"
file_pattern = "*.py"

[[rule]]
id = "REMOVEPREFIX963"
description = "Logic error in prefix removal operations."
severity = "Low"
confidence = "Low"
remediation = "Validate prefix removal and handle Unicode normalization."
ast_match = "Call(func.attr=removeprefix)"
file_pattern = "*.py"

[[rule]]
id = "REMOVESUFFIX966"
description = "Logic error in suffix removal operations."
severity = "Low"
confidence = "Low"
remediation = "Validate suffix removal and handle Unicode normalization."
ast_match = "Call(func.attr=removesuffix)"
file_pattern = "*.py"

[[rule]]
id = "ISALNUM969"
description = "Unicode category bypass in alphanumeric checking."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode character categories in validation."
ast_match = "Call(func.attr=isalnum)"
file_pattern = "*.py"

[[rule]]
id = "ISALPHA972"
description = "Unicode category bypass in alphabetic checking."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode character categories in validation."
ast_match = "Call(func.attr=isalpha)"
file_pattern = "*.py"

[[rule]]
id = "ISASCII975"
description = "ASCII validation bypass with Unicode characters."
severity = "Low"
confidence = "Low"
remediation = "Use proper Unicode handling for international support."
ast_match = "Call(func.attr=isascii)"
file_pattern = "*.py"

[[rule]]
id = "ISDECIMAL978"
description = "Unicode decimal category bypass in number validation."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode decimal categories beyond 0-9."
ast_match = "Call(func.attr=isdecimal)"
file_pattern = "*.py"

[[rule]]
id = "ISDIGIT981"
description = "Unicode digit category bypass in number validation."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode digit categories beyond 0-9."
ast_match = "Call(func.attr=isdigit)"
file_pattern = "*.py"

[[rule]]
id = "ISIDENTIFIER984"
description = "Python identifier validation bypass."
severity = "Low"
confidence = "Low"
remediation = "Validate identifiers against allowed patterns."
ast_match = "Call(func.attr=isidentifier)"
file_pattern = "*.py"

[[rule]]
id = "ISLOWER987"
description = "Case checking bypass with Unicode characters."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode case categories."
ast_match = "Call(func.attr=islower)"
file_pattern = "*.py"

[[rule]]
id = "ISNUMERIC990"
description = "Unicode numeric category bypass in validation."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode numeric categories."
ast_match = "Call(func.attr=isnumeric)"
file_pattern = "*.py"

[[rule]]
id = "ISPRINTABLE993"
description = "Printable character validation bypass."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode printable character definitions."
ast_match = "Call(func.attr=isprintable)"
file_pattern = "*.py"

[[rule]]
id = "ISSPACE996"
description = "Whitespace character validation bypass."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode whitespace character definitions."
ast_match = "Call(func.attr=isspace)"
file_pattern = "*.py"

[[rule]]
id = "ISTITLE999"
description = "Title case validation bypass with Unicode."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode title case definitions."
ast_match = "Call(func.attr=istitle)"
file_pattern = "*.py"

[[rule]]
id = "ISUPPER1002"
description = "Upper case validation bypass with Unicode."
severity = "Low"
confidence = "Low"
remediation = "Be aware of Unicode upper case definitions."
ast_match = "Call(func.attr=isupper)"
file_pattern = "*.py"

[[rule]]
id = "BYTES1005"
description = "Bytes object creation with user input."
severity = "Low"
confidence = "Low"
remediation = "Validate encoding when creating bytes from user input."
ast_match = "Call(func.id=bytes)"
file_pattern = "*.py"

[[rule]]
id = "BYTEARRAY1008"
description = "Mutable byte array creation with user input."
severity = "Low"
confidence = "Low"
remediation = "Validate encoding when creating bytearrays from user input."
ast_match = "Call(func.id=bytearray)"
file_pattern = "*.py"

[[rule]]
id = "MEMORYVIEW1011"
description = "Memory view creation exposing internal buffer."
severity = "Low"
confidence = "Low"
remediation = "Be careful when exposing memory views of sensitive data."
ast_match = "Call(func.id=memoryview)"
file_pattern = "*.py"

[[rule]]
id = "ORD1014"
description = "Character code point extraction."
severity = "Low"
confidence = "Low"
remediation = "Validate character input before extracting code points."
ast_match = "Call(func.id=ord)"
file_pattern = "*.py"

[[rule]]
id = "CHR1017"
description = "Character creation from code point."
severity = "Low"
confidence = "Low"
remediation = "Validate code points to prevent Unicode injection."
ast_match = "Call(func.id=chr)"
file_pattern = "*.py"

[[rule]]
id = "HEX1020"
description = "Hexadecimal conversion exposing internal data."
severity = "Low"
confidence = "Low"
remediation = "Be careful when converting sensitive data to hex."
ast_match = "Call(func.attr=hex)"
file_pattern = "*.py"

[[rule]]
id = "OCT1023"
description = "Octal conversion potentially exposing data."
severity = "Low"
confidence = "Low"
remediation = "Validate octal conversions in security contexts."
ast_match = "Call(func.id=oct)"
file_pattern = "*.py"

[[rule]]
id = "BIN1026"
description = "Binary conversion potentially exposing data."
severity = "Low"
confidence = "Low"
remediation = "Validate binary conversions in security contexts."
ast_match = "Call(func.id=bin)"
file_pattern = "*.py"

[[rule]]
id = "FLOAT1029"
description = "Floating point precision issues in security calculations."
severity = "Low"
confidence = "Low"
remediation = "Use decimal module for precise financial calculations."
ast_match = "Call(func.id=float)"
file_pattern = "*.py"

[[rule]]
id = "COMPLEX1032"
description = "Complex number usage in security contexts."
severity = "Low"
confidence = "Low"
remediation = "Avoid complex numbers in security-sensitive calculations."
ast_match = "Call(func.id=complex)"
file_pattern = "*.py"

[[rule]]
id = "BOOL1035"
description = "Boolean conversion potentially hiding truthy/falsy behavior."
severity = "Low"
confidence = "Low"
remediation = "Be explicit about boolean conversions in security checks."
ast_match = "Call(func.id=bool)"
file_pattern = "*.py"

[[rule]]
id = "INT1038"
description = "Integer conversion with potential overflow."
severity = "Low"
confidence = "Low"
remediation = "Validate integer conversions and handle overflow."
ast_match = "Call(func.id=int)"
file_pattern = "*.py"

[[rule]]
id = "LIST1041"
description = "List creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Limit list sizes to prevent memory exhaustion."
ast_match = "Call(func.id=list)"
file_pattern = "*.py"

[[rule]]
id = "TUPLE1044"
description = "Tuple creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Limit tuple sizes to prevent memory exhaustion."
ast_match = "Call(func.id=tuple)"
file_pattern = "*.py"

[[rule]]
id = "SET1047"
description = "Set creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Limit set sizes to prevent memory exhaustion."
ast_match = "Call(func.id=set)"
file_pattern = "*.py"

[[rule]]
id = "DICT1050"
description = "Dictionary creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Limit dictionary sizes to prevent memory exhaustion."
ast_match = "Call(func.id=dict)"
file_pattern = "*.py"

[[rule]]
id = "FROZENSET1053"
description = "Frozenset creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Limit frozenset sizes to prevent memory exhaustion."
ast_match = "Call(func.id=frozenset)"
file_pattern = "*.py"

[[rule]]
id = "RANGE1056"
description = "Range creation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Validate range parameters to prevent excessive iterations."
ast_match = "Call(func.id=range)"
file_pattern = "*.py"

[[rule]]
id = "ENUMERATE1059"
description = "Enumeration with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Consider performance implications of enumerating large collections."
ast_match = "Call(func.id=enumerate)"
file_pattern = "*.py"

[[rule]]
id = "ZIP1062"
description = "Zip operation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Be careful when zipping large collections."
ast_match = "Call(func.id=zip)"
file_pattern = "*.py"

[[rule]]
id = "MAP1065"
description = "Map operation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Consider memory usage when mapping over large collections."
ast_match = "Call(func.id=map)"
file_pattern = "*.py"

[[rule]]
id = "FILTER1068"
description = "Filter operation with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Consider performance when filtering large collections."
ast_match = "Call(func.id=filter)"
file_pattern = "*.py"

[[rule]]
id = "REDUCE1071"
description = "Reduce operation with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Consider performance when reducing large collections."
pattern = "functools\\.reduce\\("
file_pattern = "*.py"

[[rule]]
id = "SORTED1074"
description = "Sorting operation with potential DoS impact."
severity = "Low"
confidence = "Low"
remediation = "Limit collection sizes before sorting to prevent DoS."
ast_match = "Call(func.id=sorted)"
file_pattern = "*.py"

[[rule]]
id = "REVERSED1077"
description = "Reverse operation with potential memory impact."
severity = "Low"
confidence = "Low"
remediation = "Consider memory usage when reversing large collections."
ast_match = "Call(func.id=reversed)"
file_pattern = "*.py"

[[rule]]
id = "SUM1080"
description = "Sum operation with potential overflow or DoS."
severity = "Low"
confidence = "Low"
remediation = "Validate numeric ranges to prevent overflow or DoS."
ast_match = "Call(func.id=sum)"
file_pattern = "*.py"

[[rule]]
id = "MAX1083"
description = "Max operation with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Consider performance when finding max of large collections."
ast_match = "Call(func.id=max)"
file_pattern = "*.py"

[[rule]]
id = "MIN1086"
description = "Min operation with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Consider performance when finding min of large collections."
ast_match = "Call(func.id=min)"
file_pattern = "*.py"

[[rule]]
id = "ABS1089"
description = "Absolute value operation with potential overflow."
severity = "Low"
confidence = "Low"
remediation = "Handle potential overflow in absolute value calculations."
ast_match = "Call(func.id=abs)"
file_pattern = "*.py"

[[rule]]
id = "ROUND1092"
description = "Rounding operation with potential precision loss."
severity = "Low"
confidence = "Low"
remediation = "Be aware of floating point precision issues in rounding."
ast_match = "Call(func.id=round)"
file_pattern = "*.py"

[[rule]]
id = "POW1095"
description = "Power operation with potential overflow or DoS."
severity = "Medium"
confidence = "Low"
remediation = "Limit exponents to prevent computational DoS attacks."
ast_match = "Call(func.id=pow)"
file_pattern = "*.py"

[[rule]]
id = "DIVMOD1098"
description = "Division with modulo operation potential issues."
severity = "Low"
confidence = "Low"
remediation = "Handle division by zero and validate operands."
ast_match = "Call(func.id=divmod)"
file_pattern = "*.py"

[[rule]]
id = "LEN1101"
description = "Length operation with potential performance impact."
severity = "Low"
confidence = "Low"
remediation = "Be aware that len() on some objects can be expensive."
ast_match = "Call(func.id=len)"
file_pattern = "*.py"

[[rule]]
id = "ANY1104"
description = "Any operation with potential short-circuit bypass."
severity = "Low"
confidence = "Low"
remediation = "Be aware of short-circuit evaluation in security checks."
ast_match = "Call(func.id=any)"
file_pattern = "*.py"

[[rule]]
id = "ALL1107"
description = "All operation with potential short-circuit bypass."
severity = "Low"
confidence = "Low"
remediation = "Be aware of short-circuit evaluation in security checks."
ast_match = "Call(func.id=all)"
file_pattern = "*.py"

[[rule]]
id = "ITER1110"
description = "Iterator creation with potential memory issues."
severity = "Low"
confidence = "Low"
remediation = "Be careful with iterators over large or infinite sequences."
ast_match = "Call(func.id=iter)"
file_pattern = "*.py"

[[rule]]
id = "NEXT1113"
description = "Next operation with potential StopIteration issues."
severity = "Low"
confidence = "Low"
remediation = "Handle StopIteration exceptions properly."
ast_match = "Call(func.id=next)"
file_pattern = "*.py"

[[rule]]
id = "SLICE1116"
description = "Slice operation with potential memory exhaustion."
severity = "Low"
confidence = "Low"
remediation = "Validate slice parameters to prevent excessive memory usage."
ast_match = "Call(func.id=slice)"
file_pattern = "*.py"

[[rule]]
id = "PROPERTY1119"
description = "Property creation with potential access control bypass."
severity = "Low"
confidence = "Low"
remediation = "Implement proper access controls in property getters/setters."
ast_match = "Call(func.id=property)"
file_pattern = "*.py"

[[rule]]
id = "STATICMETHOD1122"
description = "Static method bypassing instance access controls."
severity = "Low"
confidence = "Low"
remediation = "Ensure static methods don't bypass intended access controls."
ast_match = "Call(func.id=staticmethod)"
file_pattern = "*.py"

[[rule]]
id = "CLASSMETHOD1125"
description = "Class method with potential privilege escalation."
severity = "Low"
confidence = "Low"
remediation = "Ensure class methods don't provide unintended access."
ast_match = "Call(func.id=classmethod)"
file_pattern = "*.py"

[[rule]]
id = "SUPER1128"
description = "Super call bypassing method resolution order."
severity = "Low"
confidence = "Low"
remediation = "Be careful with super() calls in security-sensitive contexts."
ast_match = "Call(func.id=super)"
file_pattern = "*.py"

[[rule]]
id = "CALLABLE1131"
description = "Callable check with potential type confusion."
severity = "Low"
confidence = "Low"
remediation = "Validate callable objects before invocation."
ast_match = "Call(func.id=callable)"
file_pattern = "*.py"

[[rule]]
id = "ID1134"
description = "Object identity check with potential security implications."
severity = "Low"
confidence = "Low"
remediation = "Be aware that object identity can be predictable."
ast_match = "Call(func.id=id)"
file_pattern = "*.py"

[[rule]]
id = "HASH1137"
description = "Hash operation with potential collision attacks."
severity = "Low"
confidence = "Low"
remediation = "Use cryptographic hashes for security-sensitive applications."
ast_match = "Call(func.id=hash)"
file_pattern = "*.py"

[[rule]]
id = "ASCII1140"
description = "ASCII representation potentially exposing data."
severity = "Low"
confidence = "Low"
remediation = "Be careful when converting sensitive objects to ASCII."
ast_match = "Call(func.id=ascii)"
file_pattern = "*.py"

[[rule]]
id = "INPUT1143"
description = "User input function with potential injection risks."
severity = "Medium"
confidence = "Medium"
remediation = "Validate and sanitize all user input."
ast_match = "Call(func.id=input)"
file_pattern = "*.py"

[[rule]]
id = "PRINT1146"
description = "Print statement potentially exposing sensitive data."
severity = "Low"
confidence = "Low"
remediation = "Avoid printing sensitive information."
ast_match = "Call(func.id=print)"
file_pattern = "*.py"

[[rule]]
id = "OPEN1149"
description = "File open operation with potential path traversal."
severity = "Medium"
confidence = "Medium"
remediation = "Validate file paths and use appropriate file modes."
ast_match = "Call(func.id=open)"
file_pattern = "*.py"

[[rule]]
id = "FORMAT1152"
description = "Format function with potential format string attacks."
severity = "Medium"
confidence = "Low"
remediation = "Validate format strings and use safe formatting methods."
ast_match = "Call(func.id=format)"
file_pattern = "*.py"