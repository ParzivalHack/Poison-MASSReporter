# PySpector Built-in Security Rules
# This is a curated, high-quality ruleset focusing on high-impact vulnerabilities.

# -------------------------------------------
# SECTION: Taint Analysis Rules
# -------------------------------------------

[[taint_source]]
id = "TS001"
description = "Data from a web request is considered tainted."
function_call = "request.get"
taint_target = "return"

[[taint_sink]]
id = "SK001"
vulnerability_id = "PY102" # This sink triggers the high-confidence Command Injection rule
description = "Data is passed to a command execution function."
function_call = "subprocess.run"
vulnerable_parameter_index = 0

[[taint_sanitizer]]
id = "SN001"
description = "Shell argument escaping sanitizes data for command execution."
function_call = "shlex.quote"

# -------------------------------------------
# SECTION: Injection (OWASP A03:2021)
# -------------------------------------------

[[rule]]
id = "PY102"
description = "Command Injection detected via Taint Analysis."
severity = "Critical"
confidence = "High"
remediation = "User-controlled data reached a command execution function without sanitization. Use 'shlex.quote()' to escape arguments or avoid passing user input to shell commands entirely."
# NOTE: This rule has no 'pattern' or 'ast_match'. It is triggered ONLY by the taint engine.

[[rule]]
id = "PY001"
description = "Use of 'eval()' is highly dangerous and can lead to arbitrary code execution."
severity = "High"
remediation = "Avoid 'eval()'. Use safer alternatives like 'ast.literal_eval' for data parsing."
ast_match = "Call(func.id=eval)"
file_pattern = "*.py"

[[rule]]
id = "PY103"
description = "Use of 'os.system' is a command injection risk."
severity = "High"
remediation = "Avoid 'os.system'. Use the 'subprocess' module with command and arguments passed as a list."
ast_match = "Call(func.value.id=os, func.attr=system)"
file_pattern = "*.py"

[[rule]]
id = "PY101"
description = "Potential SQL injection via string formatting in a database query."
severity = "Critical"
confidence = "High"
remediation = "Use parameterized queries (e.g., cursor.execute('SELECT * FROM users WHERE name = ?', (name,))) instead of string formatting."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY104"
description = "LDAP injection may be possible with string formatting."
severity = "High"
remediation = "Use a proper LDAP escaping library for any user-controlled data in LDAP queries."
pattern = "\\.search_s\\s*\\(.*f[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY105"
description = "Potential XSS vulnerability with 'mark_safe' or 'Markup'."
severity = "Medium"
remediation = "Ensure that data passed to 'mark_safe' or 'Markup' is from a trusted source or has been properly sanitized before being marked as safe."
pattern = "(mark_safe|Markup)\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "PY106"
description = "Use of 'subprocess.run' with 'shell=True' is a command injection risk."
severity = "High"
remediation = "Avoid 'shell=True' with 'subprocess.run'. Pass commands and arguments as a list instead of a single string."
ast_match = "Call(func.value.id=subprocess, func.attr=run)"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Cryptographic Failures (OWASP A02:2021)
# -------------------------------------------

[[rule]]
id = "PY201"
description = "Use of weak hashing algorithm MD5."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256 or a password-specific hashing function like bcrypt."
ast_match = "Call(func.value.id=hashlib, func.attr=md5)"
file_pattern = "*.py"

[[rule]]
id = "PY202"
description = "Use of broken hashing algorithm SHA1."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256."
ast_match = "Call(func.value.id=hashlib, func.attr=sha1)"
file_pattern = "*.py"

[[rule]]
id = "PY203"
description = "Use of insecure SSL/TLS protocol version."
severity = "High"
remediation = "Use 'ssl.PROTOCOL_TLS' or higher. Avoid SSLv2, SSLv3, and TLSv1.0/1.1 which have known vulnerabilities."
pattern = "ssl\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)"
file_pattern = "*.py"

[[rule]]
id = "PY204"
description = "Use of the deprecated 'pycrypto' library is discouraged due to known vulnerabilities."
severity = "High"
remediation = "Migrate from 'pycrypto' to a more secure and actively maintained library like 'pycryptodome'."
pattern = "from\\s+Crypto|import\\s+Crypto"
file_pattern = "*.py"

[[rule]]
id = "PY205"
description = "Use of PyNaCl with low-level functions can be insecure if misused."
severity = "Low"
confidence = "Low"
remediation = "Prefer using high-level APIs like 'Box' and 'SecretBox' unless low-level functions are explicitly required and their security implications are fully understood."
pattern = "nacl\\.low_level"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Insecure Deserialization & Design (OWASP A08:2021)
# -------------------------------------------

[[rule]]
id = "PY002"
description = "Use of 'pickle.loads' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data."
ast_match = "Call(func.value.id=pickle, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "PY301"
description = "Use of 'pickle.load' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data from a file."
ast_match = "Call(func.attr=load, func.value.id=pickle)"
file_pattern = "*.py"

[[rule]]
id = "PY302"
description = "Use of 'yaml.load()' is insecure and can lead to arbitrary code execution."
severity = "High"
remediation = "Always use 'yaml.safe_load()' instead of 'yaml.load()' to prevent the execution of arbitrary code from malicious YAML input."
pattern = "^\\s*[^#]*yaml\\.load" # This regex ignores comment lines
file_pattern = "*.py"

[[rule]]
id = "PY303"
description = "XML parsing with 'xml.etree.ElementTree' is vulnerable to XML bombs (Billion Laughs attack)."
severity = "High"
remediation = "Use 'defusedxml.ElementTree' to parse untrusted XML data safely, which protects against XML-based DoS attacks."
pattern = "xml\\.etree\\.ElementTree\\.(parse|fromstring)"
file_pattern = "*.py"

[[rule]]
id = "PY304"
description = "Insecure temporary file creation with 'tempfile.mktemp()' may lead to race conditions."
severity = "Medium"
remediation = "Use 'tempfile.mkstemp()' instead of 'tempfile.mktemp()' for secure temporary file creation, as it avoids a race condition where the file could be accessed by another process."
pattern = "tempfile\\.mktemp"
file_pattern = "*.py"

[[rule]]
id = "PY305"
description = "Use of 'exec()' enables arbitrary code execution from string-based input."
severity = "Critical"
remediation = "Avoid 'exec()' with untrusted input. There are rarely safe uses for this function in application code."
ast_match = "Call(func.id=exec)"
file_pattern = "*.py"

[[rule]]
id = "PY306"
description = "Use of insecure 'shelve' module for deserialization."
severity = "High"
confidence = "High"
remediation = "The 'shelve' module uses 'pickle' internally and is not secure against erroneous or maliciously constructed data. Use a safer format like JSON for data persistence."
ast_match = "Call(func.id=shelve.open)"
file_pattern = "*.py"


# -------------------------------------------
# SECTION: Security Misconfiguration (OWASP A05:2021)
# -------------------------------------------

[[rule]]
id = "G401"
description = "Flask app is running with the development server and is bound to all interfaces."
severity = "Medium"
confidence = "Low"
remediation = "The Flask development server is not secure for production. Use a production-ready WSGI server like Gunicorn or uWSGI."
pattern = "app\\.run\\(host=.*0\\.0\\.0\\.0"
file_pattern = "*.py"

[[rule]]
id = "G402"
description = "Django DEBUG mode is enabled in a settings file."
severity = "High"
remediation = "Ensure DEBUG is set to False in production settings to avoid exposing sensitive application internals."
pattern = "^\\s*DEBUG\\s*=\\s*True"
file_pattern = "*settings*.py"

[[rule]]
id = "G403"
description = "Flask DEBUG mode is enabled."
severity = "High"
remediation = "Ensure 'app.debug = False' or the 'DEBUG' configuration variable is set to False in production environments."
pattern = "app\\.run\\(.*debug=True"
file_pattern = "*.py"

[[rule]]
id = "G404"
description = "Django's CSRF protection appears to be disabled globally."
severity = "Critical"
remediation = "Ensure 'django.middleware.csrf.CsrfViewMiddleware' is active (not commented out) in your MIDDLEWARE setting to protect against Cross-Site Request Forgery attacks."
pattern = "#.*CsrfViewMiddleware" # Simple check for commented-out middleware
file_pattern = "*settings*.py"

[[rule]]
id = "G405"
description = "Requests made without certificate verification."
severity = "High"
remediation = "Remove 'verify=False' from 'requests' calls. Disabling certificate verification exposes the application to man-in-the-middle attacks."
ast_match = "Call(keywords.*.arg=verify, keywords.*.value.value=False)"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Hardcoded Secrets (OWASP A07:2021)
# -------------------------------------------

[[rule]]
id = "G101"
description = "Hardcoded password or secret detected."
severity = "High"
confidence = "Medium"
remediation = "Store credentials in environment variables, a secrets management system (like HashiCorp Vault or AWS Secrets Manager), or encrypted configuration files."
pattern = "(?i)(password|secret|api_key|token|authkey|bearer|cred|credentials)\\s*[:=]\\s*[\"']\\w{8,}[\"']"
file_pattern = "*.py"

[[rule]]
id = "G102"
description = "Hardcoded private key detected."
severity = "Critical"
confidence = "High"
remediation = "Load private keys from a secure, encrypted file or a secrets management system. Do not commit them directly to source control."
pattern = "-----BEGIN (RSA|EC|OPENSSH|PGP) PRIVATE KEY-----"
file_pattern = "*"

[[rule]]
id = "G103"
description = "Use of a blank password for a user or service."
severity = "High"
remediation = "Ensure all users and service accounts have strong, non-empty passwords. A blank password provides trivial access for attackers."
pattern = "(?i)(password|passwd|pass)\\s*[:=]\\s*[\"']\\s*[\"']"
file_pattern = "*.py"

[[rule]]
id = "G104"
description = "JWT secret is hardcoded."
severity = "Critical"
remediation = "Load JWT secrets from environment variables or a secrets management system. A compromised hardcoded secret allows an attacker to forge valid tokens."
pattern = "(?i)(jwt_secret|jwt_key)\\s*[:=]\\s*[\"'].+[\"']"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: IaC and Configuration File Security
# -------------------------------------------

[[rule]]
id = "DKR001"
description = "Password or secret found in Dockerfile ENV instruction."
severity = "High"
remediation = "Do not use ENV for secrets as they are baked into the image layers. Use build-time arguments (ARG) with the --secret flag or a secrets management tool."
pattern = "(?i)ENV\\s+(PASS|PASSWORD|SECRET|TOKEN|API_KEY)\\s+"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR002"
description = "Use of 'latest' tag for a base image is not recommended for production."
severity = "Low"
remediation = "Pin base images to a specific version digest (e.g., 'ubuntu@sha256:...') for reproducible and secure builds, preventing unexpected changes."
pattern = "FROM\\s+\\w+:latest"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR003"
description = "Exposing the Docker daemon socket inside a container is a security risk."
severity = "Critical"
remediation = "Avoid mounting '/var/run/docker.sock' into containers. It allows for container escape and full control over the host system."
pattern = "/var/run/docker\\.sock"
file_pattern = "docker-compose*.y*ml"

[[rule]]
id = "K8S001"
description = "Kubernetes container running in privileged mode."
severity = "Critical"
remediation = "Set 'securityContext.privileged' to 'false' or remove it. Privileged containers have root access to the host, breaking isolation."
pattern = "privileged:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "K8S002"
description = "Kubernetes container allows privilege escalation."
severity = "High"
remediation = "Explicitly set 'securityContext.allowPrivilegeEscalation' to 'false' to prevent processes from gaining more privileges than their parent."
pattern = "allowPrivilegeEscalation:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "TF001"
description = "Terraform AWS S3 bucket is configured to be publicly readable."
severity = "Critical"
remediation = "Set the 'acl' property of 'aws_s3_bucket' to 'private'. Avoid 'public-read' or 'public-read-write' unless you intend for the data to be public."
pattern = "acl\\s*=\\s*\"(public-read|public-read-write)\""
file_pattern = "*.tf"

[[rule]]
id = "CFG001"
description = "AWS credentials detected in a configuration file."
severity = "Critical"
remediation = "Do not hardcode AWS credentials. Use IAM roles, environment variables, or tools like 'aws-vault' for managing credentials securely."
pattern = "(?i)(aws_access_key_id|aws_secret_access_key)\\s*=\\s*[A-Za-z0-9/+=]{20,}"
file_pattern = "*.ini"

# -------------------------------------------
# SECTION: GENERIC AND ADVANCED RULES (about 300smth rules)
# -------------------------------------------

[[rule]]
id = "PY500"
description = "Use of 'builtins.exec' allows for arbitrary code execution and should be avoided."
severity = "High"
confidence = "Medium"
remediation = "Avoid executing code from strings. Refactor the code to use safer alternatives depending on the use case."
ast_match = "Call(func.attr=exec, func.value.id=builtins)"
file_pattern = "*.py"

[[rule]]
id = "IAC501"
description = "Insecure 'paramiko' host key policy allows for potential MITM attacks."
severity = "High"
remediation = "Avoid using 'AutoAddPolicy'. Verify host keys manually or use 'RejectPolicy' or 'WarningPolicy' to ensure you are connecting to the correct server."
pattern = "\\.set_missing_host_key_policy\\(paramiko\\.AutoAddPolicy"
file_pattern = "*.py"

[[rule]]
id = "SEC502"
description = "Use of 'os.popen' is a command injection risk."
severity = "High"
remediation = "Use the 'subprocess' module with command and arguments passed as a list to avoid shell interpretation of user input."
ast_match = "Call(func.value.id=os, func.attr=popen)"
file_pattern = "*.py"

[[rule]]
id = "PY503"
description = "Predictable random number generator used for security-sensitive context."
severity = "Medium"
remediation = "The 'random' module is not cryptographically secure. Use the 'secrets' module for generating tokens, passwords, or keys."
pattern = "import\\s+random"
file_pattern = "*.py"

[[rule]]
id = "G504"
description = "Debugging breakpoint detected in code."
severity = "Low"
remediation = "Remove calls to 'pdb.set_trace()' or other debugging breakpoints before deploying to production to avoid unintended execution pauses."
pattern = "\\.set_trace\\("
file_pattern = "*.py"

[[rule]]
id = "PY505"
description = "Use of Django's 'extra()' method is a SQL injection risk."
severity = "High"
remediation = "The '.extra()' method can easily lead to SQL injection. Use other ORM features or write raw SQL safely with parameters instead."
pattern = "\\.extra\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "JS506"
description = "LXML parsing without disabled entity resolution is vulnerable to entity expansion attacks."
severity = "High"
remediation = "When parsing untrusted XML with 'lxml', disable entity resolution by creating a parser with 'resolve_entities=False' to prevent XML bombs."
pattern = "lxml\\.etree\\.(fromstring|parse)"
file_pattern = "*.py"

[[rule]]
id = "PY507"
description = "Flask session cookie may not be marked as secure."
severity = "Medium"
remediation = "Set 'SESSION_COOKIE_SECURE' to True in your Flask application configuration to ensure session cookies are only sent over HTTPS."
pattern = "SESSION_COOKIE_SECURE\\s*=\\s*False"
file_pattern = "*.py"

[[rule]]
id = "G508"
description = "Flask session cookie may not be marked as HttpOnly."
severity = "Medium"
remediation = "Set 'SESSION_COOKIE_HTTPONLY' to True in your Flask application configuration to prevent client-side scripts from accessing the session cookie."
pattern = "SESSION_COOKIE_HTTPONLY\\s*=\\s*False"
file_pattern = "*.py"

[[rule]]
id = "PY509"
description = "Django setting 'SECURE_SSL_REDIRECT' may be disabled."
severity = "Medium"
remediation = "Set 'SECURE_SSL_REDIRECT = True' in production settings to redirect all HTTP requests to HTTPS, preventing downgrade attacks."
pattern = "SECURE_SSL_REDIRECT\\s*=\\s*False"
file_pattern = "*.py"

[[rule]]
id = "DKR510"
description = "Use of 'assert' statements for data validation is unsafe."
severity = "Low"
remediation = "Assert statements are removed when Python is run in optimized mode ('-O'), which can change application behavior. Use conditional checks and raise exceptions for validation."
ast_match = "Assert"
file_pattern = "*.py"

[[rule]]
id = "PY511"
description = "Use of insecure FTP protocol via 'ftplib'."
severity = "Medium"
remediation = "The 'ftplib' module uses the insecure FTP protocol, which transmits credentials in cleartext. Use SFTP with a library like 'paramiko' instead."
pattern = "import\\s+ftplib"
file_pattern = "*.py"

[[rule]]
id = "IAC512"
description = "Mako templates initialized with HTML escaping disabled may be vulnerable to XSS."
severity = "High"
remediation = "Ensure Mako templates are initialized with default filters that include HTML escaping (e.g., 'h') to prevent Cross-Site Scripting vulnerabilities."
pattern = "Template\\(.*default_filters=\\[\\]"
file_pattern = "*.py"

[[rule]]
id = "G513"
description = "Use of '@csrf_exempt' in Django disables Cross-Site Request Forgery protection."
severity = "Medium"
remediation = "Avoid using '@csrf_exempt'. If an endpoint must be exempt, ensure it performs its own security checks and does not perform state-changing operations based on cookies."
pattern = "csrf_exempt"
file_pattern = "*.py"

[[rule]]
id = "SEC514"
description = "Potential reflected Cross-Site Scripting (XSS) in Flask by returning request data."
severity = "Medium"
remediation = "Do not return request data directly to the user. Use a templating engine like Jinja2 that performs auto-escaping by default."
pattern = "return\\s+request\\.args\\.get"
file_pattern = "*.py"

[[rule]]
id = "PY515"
description = "Binding to all network interfaces can expose a service to unintended networks."
severity = "Medium"
remediation = "Binding a listening socket to '0.0.0.0' can be dangerous. Bind to a specific, trusted network interface instead if possible."
pattern = "bind\\(('|\"0\\.0\\.0\\.0'|\")"
file_pattern = "*.py"

[[rule]]
id = "JS516"
description = "Use of insecure 'telnetlib' library is discouraged."
severity = "Medium"
remediation = "Telnet is an insecure cleartext protocol. Use SSH with a library like 'paramiko' instead for secure remote connections."
pattern = "import\\s+telnetlib"
file_pattern = "*.py"

[[rule]]
id = "PY517"
description = "Use of insecure XML-RPC server detected."
severity = "High"
remediation = "The 'SimpleXMLRPCServer' module can have security issues, including DoS. Avoid its use, or ensure it is not exposed to untrusted networks."
pattern = "SimpleXMLRPCServer"
file_pattern = "*.py"

[[rule]]
id = "PY518"
description = "Jinja2 autoescaping is disabled, increasing XSS risk."
severity = "Critical"
confidence = "High"
remediation = "Do not disable autoescaping in Jinja2 environments. If specific data needs to be rendered as raw HTML, use the 'safe' filter with extreme caution."
pattern = "autoescape=False"
file_pattern = "*.py"

[[rule]]
id = "PY519"
description = "Potential command injection using os.exec* functions."
severity = "High"
remediation = "Avoid using os.exec* functions with user-controllable input. Use the 'subprocess' module with arguments passed as a list."
pattern = "os\\.execl|os\\.execle|os\\.execlp|os\\.execlpe|os\\.execv|os\\.execve|os\\.execvp|os\\.execvpe"
file_pattern = "*.py"

[[rule]]
id = "PY520"
description = "Django SECRET_KEY may be exposed or guessable."
severity = "Critical"
confidence = "Low"
remediation = "Ensure the Django SECRET_KEY is long, random, and loaded from a secure source like an environment variable, not hardcoded."
pattern = "SECRET_KEY\\s*=\\s*['\\\"]"
file_pattern = "*settings*.py"

[[rule]]
id = "PY521"
description = "Flask's 'send_file' can lead to path traversal if not used carefully."
severity = "High"
remediation = "Do not pass unsanitized user input directly to 'send_file' or 'send_from_directory'. Sanitize the filename and validate the path."
ast_match = "Call(func.id=send_file)"
file_pattern = "*.py"

[[rule]]
id = "G522"
description = "The 'deserialize' function from 'django.core.serializers' can be unsafe."
severity = "High"
remediation = "Django's deserializer is not intended for untrusted data and can have vulnerabilities similar to pickle. Avoid deserializing data from untrusted sources."
pattern = "\\bdeserialize\\b\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "PY523"
description = "Loading untrusted data with 'json.loads' is safe, but parsing can still be a DoS vector."
severity = "Low"
remediation = "While 'json.loads' is safer than 'pickle', parsing very large or deeply nested JSON strings can consume significant resources. Implement input validation and size limits."
ast_match = "Call(func.value.id=json, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "JS524"
description = "Use of weak random number generation from the 'random' module."
severity = "Medium"
remediation = "For security-critical applications like generating secrets or tokens, use the 'secrets' module instead of 'random'."
ast_match = "Attribute(value.id=random, attr=random)"
file_pattern = "*.py"

[[rule]]
id = "PY525"
description = "Use of werkzeug's insecure 'run_simple' development server."
severity = "High"
remediation = "The 'run_simple' function is for development only. For production, deploy your application using a production-ready WSGI server like Gunicorn."
pattern = "run_simple"
file_pattern = "*.py"

[[rule]]
id = "PY526"
description = "File opened for reading, which could be sensitive."
severity = "Low"
confidence = "Low"
remediation = "Review file read operations to ensure no sensitive files (e.g., configuration with passwords, private keys) are being accessed and potentially exposed."
ast_match = "Attribute(attr=read, value.name=open)"
file_pattern = "*.py"

[[rule]]
id = "PY527"
description = "Use of 'subprocess.call' with 'shell=True' is a command injection risk."
severity = "High"
remediation = "Avoid 'shell=True'. Pass commands and arguments as a list to prevent the shell from interpreting special characters from user input."
ast_match = "Call(func.value.id=subprocess, func.attr=call, keywords.*.arg=shell, keywords.*.value.value=True)"
file_pattern = "*.py"

[[rule]]
id = "PY528"
description = "Directly opening and reading '/etc/passwd' can be a sign of information disclosure."
severity = "Medium"
remediation = "Application code should not typically read system-level files like '/etc/passwd'. This could be part of an attempt to enumerate users on the system."
pattern = "open\\s*\\(\\s*['\\\"]/etc/passwd"
file_pattern = "*.py"

[[rule]]
id = "PY529"
description = "Use of 'compile()' with user input can lead to code execution."
severity = "High"
remediation = "The 'compile()' function can execute arbitrary code, much like 'eval()'. Avoid using it with any untrusted input."
ast_match = "Call(func.id=compile)"
file_pattern = "*.py"

[[rule]]
id = "PY530"
description = "Unrestricted file upload vulnerability."
severity = "Critical"
confidence = "Low"
remediation = "Validate uploaded file types, names, and sizes. Store uploaded files in a non-executable directory outside of the web root and serve them with a safe Content-Type."
pattern = "request\\.files"
file_pattern = "*.py"

[[rule]]
id = "G531"
description = "Django's 'ALLOWED_HOSTS' setting is overly permissive."
severity = "High"
remediation = "Avoid using wildcards like '*' in 'ALLOWED_HOSTS'. Explicitly list the domains that are allowed to serve your site to prevent Host header injection attacks."
pattern = "ALLOWED_HOSTS\\s*=\\s*\\[\\s*['\\\"]\\*['\\\"]\\s*\\]"
file_pattern = "*settings*.py"

[[rule]]
id = "PY532"
description = "Use of 'django.utils.safestring.mark_safe' can lead to XSS."
severity = "Medium"
remediation = "Only use 'mark_safe' on data that is known to be safe and has been sanitized. Improper use can re-enable auto-escaping and lead to XSS."
ast_match = "Call(func.attr=mark_safe)"
file_pattern = "*.py"

[[rule]]
id = "JS533"
description = "Django application running with a default or easily guessable secret key."
severity = "Critical"
remediation = "Generate a long, random secret key and load it from a secure location like an environment variable. A compromised secret key can lead to remote code execution."
pattern = "SECRET_KEY\\s*=\\s*['\\\"]django-insecure-"
file_pattern = "*.py"

[[rule]]
id = "PY534"
description = "Insecure default permissions when creating directories with 'os.makedirs'."
severity = "Low"
remediation = "When using 'os.makedirs', specify the 'mode' argument to set secure permissions (e.g., 0o750) and avoid creating world-writable directories."
ast_match = "Call(func.value.id=os, func.attr=makedirs)"
file_pattern = "*.py"

[[rule]]
id = "PY535"
description = "Using 'ssl.wrap_socket' without specifying 'cert_reqs' disables certificate validation."
severity = "High"
remediation = "To prevent MITM attacks, always set 'cert_reqs=ssl.CERT_REQUIRED' and specify a 'ca_certs' file when using 'ssl.wrap_socket' for client connections."
pattern = "ssl\\.wrap_socket"
file_pattern = "*.py"

[[rule]]
id = "PY536"
description = "Potential Server-Side Request Forgery (SSRF) using the 'requests' library."
severity = "Critical"
confidence = "Low"
remediation = "Do not pass user-controlled URLs directly to the 'requests' library. Validate and whitelist the URL's domain and scheme to prevent the server from making arbitrary requests."
pattern = "requests\\.(get|post|put|delete|head|options)\\s*\\(.*request\\."
file_pattern = "*.py"

[[rule]]
id = "G537"
description = "Django's 'X-Frame-Options' header may be misconfigured, allowing clickjacking."
severity = "Medium"
remediation = "Ensure the 'X-Frame-Options' middleware is enabled and set to 'DENY' or 'SAMEORIGIN' to prevent your site from being embedded in malicious iframes."
pattern = "X_FRAME_OPTIONS\\s*=\\s*['\\\"]ALLOW-FROM"
file_pattern = "*.py"

[[rule]]
id = "PY538"
description = "Use of weak ciphers with the 'ssl' module."
severity = "High"
remediation = "When creating an SSL context or wrapping a socket, explicitly define a strong cipher suite to avoid using weak or vulnerable encryption algorithms."
pattern = "ssl\\.wrap_socket\\(.*ciphers="
file_pattern = "*.py"

[[rule]]
id = "JS539"
description = "Deserializing untrusted data with 'dill' can lead to remote code execution."
severity = "High"
remediation = "'dill' is even more powerful than 'pickle' and should never be used on data from untrusted sources. Use a safe format like JSON instead."
pattern = "import\\s+dill"
file_pattern = "*.py"

[[rule]]
id = "PY540"
description = "Insecure cookie configuration in Django."
severity = "Medium"
remediation = "In production, set 'SESSION_COOKIE_SECURE = True' and 'CSRF_COOKIE_SECURE = True' in your settings to ensure cookies are only sent over HTTPS."
pattern = "(SESSION_COOKIE_SECURE|CSRF_COOKIE_SECURE)\\s*=\\s*False"
file_pattern = "*settings*.py"

[[rule]]
id = "PY541"
description = "Potential for open redirects using user-controlled data."
severity = "Medium"
remediation = "Validate that any URL used for redirection points to an expected, whitelisted domain. Do not redirect to arbitrary URLs provided by the user."
pattern = "HttpResponseRedirect\\s*\\(.*request\\."
file_pattern = "*.py"

[[rule]]
id = "G542"
description = "The 'tarfile' module has path traversal vulnerabilities."
severity = "High"
remediation = "Before extracting files from a tar archive, inspect the filenames to ensure they do not contain '..' or start with '/' to prevent writing files outside the intended directory."
pattern = "\\.extractall\\("
file_pattern = "*.py"

[[rule]]
id = "PY543"
description = "Unsafe deserialization using 'marshal.loads'."
severity = "Critical"
remediation = "The 'marshal' module is not secure against maliciously constructed data. Never use 'marshal.loads' on untrusted input."
ast_match = "Call(func.value.id=marshal, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "PY544"
description = "Use of 'eval' within a 'Pymark' template can lead to code execution."
severity = "High"
remediation = "Pymark templates can execute code via 'eval'. Ensure that templates are trusted and user input is not directly incorporated into template logic."
pattern = "pymark\\.parse"
file_pattern = "*.py"

[[rule]]
id = "PY545"
description = "Disabling XML DTD processing in 'lxml' is critical for security."
severity = "High"
remediation = "To prevent XML External Entity (XXE) attacks, create an lxml parser with DTD loading disabled: 'etree.XMLParser(load_dtd=False)'."
pattern = "XMLParser\\s*\\("
file_pattern = "*.py"

[[rule]]
id = "PY546"
description = "Potential for code execution by rendering untrusted Genshi templates."
severity = "High"
remediation = "Genshi templates can execute Python code. Do not render templates from untrusted sources or with untrusted user input."
pattern = "genshi\\.template\\.MarkupTemplate"
file_pattern = "*.py"

[[rule]]
id = "PY547"
description = "Use of 'subprocess.Popen' with 'shell=True' is a command injection risk."
severity = "High"
remediation = "Avoid using 'shell=True'. Pass the command and its arguments as a list to prevent the shell from interpreting special characters."
ast_match = "Call(func.value.id=subprocess, func.attr=Popen, keywords.*.arg=shell, keywords.*.value.value=True)"
file_pattern = "*.py"

[[rule]]
id = "PY548"
description = "Insecure configuration of Django's 'SECURE_HSTS_SECONDS'."
severity = "Medium"
remediation = "Set a non-zero value for 'SECURE_HSTS_SECONDS' in production to enable HTTP Strict Transport Security (HSTS), which protects against MITM attacks."
pattern = "SECURE_HSTS_SECONDS\\s*=\\s*0"
file_pattern = "*settings*.py"

[[rule]]
id = "PY549"
description = "The 'zipfile' module is vulnerable to path traversal ('Zip Slip')."
severity = "High"
remediation = "Before extracting files from a zip archive, validate each filename to ensure it does not contain '..' or start with '/' to prevent writing files outside the target directory."
pattern = "\\.extract\\("
file_pattern = "*.py"

[[rule]]
id = "PY550"
description = "Use of the 'input()' function in Python 2 is a security risk."
severity = "Critical"
remediation = "In Python 2, 'input()' is equivalent to 'eval(raw_input())' and can execute arbitrary code. Use 'raw_input()' instead and manually parse the result."
ast_match = "Call(func.id=input)"
file_pattern = "*.py"

[[rule]]
id = "PY551"
description = "Starting a process with 'pexpect' can lead to injection if not handled carefully."
severity = "Medium"
remediation = "When using 'pexpect.spawn' or 'pexpect.run', ensure that any user-controlled input is properly escaped or validated before being passed as a command or argument."
pattern = "pexpect\\.spawn|pexpect\\.run"
file_pattern = "*.py"

[[rule]]
id = "G552"
description = "Potential for Cross-Site Scripting (XSS) in Django templates with 'autoescape off'."
severity = "Medium"
remediation = "Avoid using '{% autoescape off %}' in Django templates. If absolutely necessary, ensure the enclosed data is from a trusted source and properly sanitized."
pattern = "\\{%\\s*autoescape\\s+off\\s*%}"
file_pattern = "*.html"

[[rule]]
id = "PY553"
description = "Use of 'logging.config.listen' can be a security risk."
severity = "High"
remediation = "Opening a socket for logging configuration can expose an insecure listener. Ensure the listener is bound to a trusted interface and properly secured if used."
pattern = "logging\\.config\\.listen"
file_pattern = "*.py"

[[rule]]
id = "PY554"
description = "Using 'hashlib.new' with a weak algorithm like MD5 or SHA1."
severity = "Medium"
remediation = "Avoid using 'md5' or 'sha1' with 'hashlib.new'. Choose a stronger algorithm like 'sha256'."
pattern = "hashlib\\.new\\(\\s*['\\\"](md5|sha1)['\\\"]"
file_pattern = "*.py"

[[rule]]
id = "PY555"
description = "Hardcoded JWT secret key detected."
severity = "Critical"
remediation = "Load JWT secret keys from a secure source like environment variables or a secrets manager, not directly from the code."
pattern = "jwt\\.encode\\(.*key="
file_pattern = "*.py"

[[rule]]
id = "PY556"
description = "Use of an empty password in a database connection string."
severity = "High"
remediation = "Ensure that all database accounts have strong, non-empty passwords. Do not use empty passwords, even in development environments."
pattern = "password=\\s*['\\\"]\\s*['\\\"]"
file_pattern = "*.py"

[[rule]]
id = "PY557"
description = "Executing a 'sudo' command via subprocess can be a privilege escalation risk."
severity = "Critical"
remediation = "Applications should generally not execute commands with 'sudo'. Re-evaluate the application's permissions and design to avoid this."
pattern = "subprocess\\.(run|call|check_call|Popen)\\s*\\(\\s*\\['sudo',"
file_pattern = "*.py"

[[rule]]
id = "PY558"
description = "Hardcoded credentials found in a URL."
severity = "High"
remediation = "Do not hardcode usernames and passwords in URLs. Use a secrets management system or environment variables to handle credentials securely."
pattern = "['\\\"](https?|ftp)://\\w+:\\w+@"
file_pattern = "*.py"

[[rule]]
id = "G559"
description = "Use of 'pickletools' can be dangerous if used on untrusted data."
severity = "Medium"
remediation = "The 'pickletools' module is designed for analyzing pickle data, but like pickle itself, it should not be used on data from untrusted sources."
pattern = "import\\s+pickletools"
file_pattern = "*.py"

[[rule]]
id = "PY560"
description = "Flask application appears to be missing CSRF protection."
severity = "High"
remediation = "Use a library like Flask-WTF or Flask-SeaSurf to add Cross-Site Request Forgery protection to your application."
pattern = "from\\s+flask\\s+import\\s+Flask"
file_pattern = "*.py"