# PySpector Built-in Security Rules
# This is a curated, high-quality ruleset focusing on high-impact vulnerabilities.

# -------------------------------------------
# SECTION: Taint Analysis Rules
# -------------------------------------------

[[taint_source]]
id = "TS001"
description = "Data from a web request is considered tainted."
function_call = "request.get"
taint_target = "return"

[[taint_sink]]
id = "SK001"
vulnerability_id = "PY102" # This sink triggers the high-confidence Command Injection rule
description = "Data is passed to a command execution function."
function_call = "subprocess.run"
vulnerable_parameter_index = 0

[[taint_sanitizer]]
id = "SN001"
description = "Shell argument escaping sanitizes data for command execution."
function_call = "shlex.quote"

# -------------------------------------------
# SECTION: Injection (OWASP A03:2021)
# -------------------------------------------

[[rule]]
id = "PY102"
description = "Command Injection detected via Taint Analysis."
severity = "Critical"
confidence = "High"
remediation = "User-controlled data reached a command execution function without sanitization. Use 'shlex.quote()' to escape arguments or avoid passing user input to shell commands entirely."
# NOTE: This rule has no 'pattern' or 'ast_match'. It is triggered ONLY by the taint engine.

[[rule]]
id = "PY001"
description = "Use of 'eval()' is highly dangerous."
severity = "High"
remediation = "Avoid 'eval()'. Use safer alternatives like 'ast.literal_eval' for data parsing."
ast_match = "Call(func.id=eval)"
file_pattern = "*.py"

[[rule]]
id = "PY103"
description = "Use of os.system is a command injection risk."
severity = "High"
remediation = "Avoid 'os.system'. Use the 'subprocess' module with command and arguments as a list."
ast_match = "Call(func.value.id=os, func.attr=system)"
file_pattern = "*.py"

[[rule]]
id = "PY101"
description = "Potential SQL injection via string formatting in database query."
severity = "Critical"
confidence = "High"
remediation = "Use parameterized queries (e.g., cursor.execute('SELECT * FROM users WHERE name = ?', (name,))) instead of string formatting."
pattern = "\\.(execute|executemany)\\s*\\(\\s*f?[\"'].*SELECT.*(FROM|UPDATE|DELETE).*%s.*[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY104"
description = "LDAP injection may be possible with string formatting."
severity = "High"
remediation = "Use a proper LDAP escaping library for any user-controlled data in LDAP queries."
pattern = "\\.search_s\\s*\\(.*f[\"']"
file_pattern = "*.py"

[[rule]]
id = "PY105"
description = "Potential XSS vulnerability with mark_safe or Markup."
severity = "Medium"
remediation = "Ensure that data passed to 'mark_safe' or 'Markup' is from a trusted source or has been properly sanitized."
pattern = "(mark_safe|Markup)\\s*\\("
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Cryptographic Failures (OWASP A02:2021)
# -------------------------------------------

[[rule]]
id = "PY201"
description = "Use of weak hashing algorithm MD5."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256 or a password-specific hashing function like bcrypt."
ast_match = "Call(func.value.id=hashlib, func.attr=md5)"
file_pattern = "*.py"

[[rule]]
id = "PY202"
description = "Use of broken hashing algorithm SHA1."
severity = "Medium"
remediation = "Use a stronger hashing algorithm like SHA-256."
ast_match = "Call(func.value.id=hashlib, func.attr=sha1)"
file_pattern = "*.py"

[[rule]]
id = "PY203"
description = "Use of insecure SSL/TLS protocol version."
severity = "High"
remediation = "Use 'ssl.PROTOCOL_TLS' or higher. Avoid SSLv2, SSLv3, and TLSv1.0/1.1."
pattern = "ssl\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)"
file_pattern = "*.py"

[[rule]]
id = "PY204"
description = "Use of the 'pycrypto' library is discouraged due to known vulnerabilities."
severity = "High"
remediation = "Migrate from 'pycrypto' to a more secure and actively maintained library like 'pycryptodome'."
pattern = "from\\s+Crypto|import\\s+Crypto"
file_pattern = "*.py"

[[rule]]
id = "PY205"
description = "Use of PyNaCl with low-level functions can be insecure if misused."
severity = "Low"
confidence = "Low"
remediation = "Prefer using high-level APIs like 'Box' and 'SecretBox' unless low-level functions are explicitly required and understood."
pattern = "nacl\\.low_level"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Insecure Deserialization & Design (OWASP A08:2021)
# -------------------------------------------

[[rule]]
id = "PY002"
description = "Use of 'pickle.loads' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data."
ast_match = "Call(func.value.id=pickle, func.attr=loads)"
file_pattern = "*.py"

[[rule]]
id = "PY301"
description = "Use of 'pickle.load' for deserialization can lead to remote code execution."
severity = "High"
remediation = "Use a safer serialization format like JSON if deserializing untrusted data."
ast_match = "Call(func.attr=load, func.value.id=pickle)"
file_pattern = "*.py"

[[rule]]
id = "PY302"
description = "Use of 'yaml.load()' is insecure. Use 'yaml.safe_load()'."
severity = "High"
remediation = "Always use 'yaml.safe_load()' to prevent arbitrary code execution from malicious YAML."
pattern = "^\\s*[^#]*yaml\\.load" # This regex ignores comment lines
file_pattern = "*.py"

[[rule]]
id = "PY303"
description = "XML parsing with 'xml.etree.ElementTree' is vulnerable to XML bombs."
severity = "High"
remediation = "Use 'defusedxml.ElementTree' to parse untrusted XML data safely."
pattern = "xml\\.etree\\.ElementTree\\.(parse|fromstring)"
file_pattern = "*.py"

[[rule]]
id = "PY304"
description = "Insecure temporary file creation may lead to race conditions."
severity = "Medium"
remediation = "Use 'tempfile.mkstemp()' instead of 'tempfile.mktemp()' for secure temporary file creation."
pattern = "tempfile\\.mktemp"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Security Misconfiguration (OWASP A05:2021)
# -------------------------------------------

[[rule]]
id = "G401"
description = "Flask app is running with the development server in a non-debug context."
severity = "Medium"
confidence = "Low"
remediation = "Use a production-ready WSGI server like Gunicorn or uWSGI instead of 'app.run()'."
pattern = "app\\.run\\(host=.*0\\.0\\.0\\.0"
file_pattern = "*.py"

[[rule]]
id = "G402"
description = "Django DEBUG mode is enabled in a settings file."
severity = "High"
remediation = "Ensure DEBUG is set to False in production settings."
pattern = "^\\s*DEBUG\\s*=\\s*True"
file_pattern = "*settings*.py"

[[rule]]
id = "G403"
description = "Flask DEBUG mode is enabled."
severity = "High"
remediation = "Ensure app.debug is False or the DEBUG config variable is False in production."
pattern = "app\\.run\\(.*debug=True"
file_pattern = "*.py"

[[rule]]
id = "G404"
description = "Django's CSRF protection appears to be disabled globally."
severity = "Critical"
remediation = "Ensure 'django.middleware.csrf.CsrfViewMiddleware' is active in your MIDDLEWARE setting."
pattern = "#.*CsrfViewMiddleware" # Simple check for commented-out middleware
file_pattern = "*settings*.py"

[[rule]]
id = "G405"
description = "Requests made without certificate verification."
severity = "High"
remediation = "Remove 'verify=False' from requests calls to prevent man-in-the-middle attacks."
ast_match = "Call(keywords.*.arg=verify, keywords.*.value.value=False)"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: Hardcoded Secrets (OWASP A07:2021)
# -------------------------------------------

[[rule]]
id = "G101"
description = "Hardcoded password or secret detected."
severity = "High"
confidence = "Medium"
remediation = "Store credentials in environment variables or a secrets management system."
pattern = "(?i)(password|secret|api_key|token|authkey|bearer|cred|credentials)\\s*[:=]\\s*[\"']\\w{8,}[\"']"
file_pattern = "*.py"

[[rule]]
id = "G102"
description = "Hardcoded private key detected."
severity = "Critical"
confidence = "High"
remediation = "Load private keys from a secure, encrypted file or secrets manager."
pattern = "-----BEGIN (RSA|EC|OPENSSH|PGP) PRIVATE KEY-----"

[[rule]]
id = "G103"
description = "Use of a blank password for a user or service."
severity = "High"
remediation = "Ensure all users and service accounts have strong, non-empty passwords."
pattern = "(?i)(password|passwd|pass)\\s*[:=]\\s*[\"']\\s*[\"']"
file_pattern = "*.py"

[[rule]]
id = "G104"
description = "JWT secret is hardcoded."
severity = "Critical"
remediation = "Load JWT secrets from environment variables or a secrets management system."
pattern = "(?i)(jwt_secret|jwt_key)\\s*[:=]\\s*[\"'].+[\"']"
file_pattern = "*.py"

# -------------------------------------------
# SECTION: IaC and Configuration File Security
# -------------------------------------------

[[rule]]
id = "DKR001"
description = "Password or secret found in Dockerfile ENV instruction."
severity = "High"
remediation = "Use build-time arguments (ARG) with the --secret flag or a secrets management tool."
pattern = "(?i)ENV\\s+(PASS|PASSWORD|SECRET|TOKEN|API_KEY)\\s+"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR002"
description = "Use of 'latest' tag for base image is not recommended for production."
severity = "Low"
remediation = "Pin base images to a specific version digest for reproducible and secure builds."
pattern = "FROM\\s+\\w+:latest"
file_pattern = "Dockerfile"

[[rule]]
id = "DKR003"
description = "Exposing Docker daemon socket inside a container is a security risk."
severity = "Critical"
remediation = "Avoid mounting '/var/run/docker.sock' into containers."
pattern = "/var/run/docker\\.sock"
file_pattern = "docker-compose*.y*ml"

[[rule]]
id = "K8S001"
description = "Kubernetes container running in privileged mode."
severity = "Critical"
remediation = "Set 'securityContext.privileged' to 'false' or remove it."
pattern = "privileged:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "K8S002"
description = "Kubernetes container allows privilege escalation."
severity = "High"
remediation = "Explicitly set 'securityContext.allowPrivilegeEscalation' to 'false'."
pattern = "allowPrivilegeEscalation:\\s*true"
file_pattern = "*.y*ml"

[[rule]]
id = "TF001"
description = "Terraform AWS S3 bucket is publicly readable."
severity = "Critical"
remediation = "Set the 'acl' property of 'aws_s3_bucket' to 'private', not 'public-read' or 'public-read-write'."
pattern = "acl\\s*=\\s*\"(public-read|public-read-write)\""
file_pattern = "*.tf"

[[rule]]
id = "CFG001"
description = "AWS credentials detected in configuration file."
severity = "Critical"
remediation = "Use IAM roles or environment variables for AWS credentials."
pattern = "(?i)(aws_access_key_id|aws_secret_access_key)\\s*=\\s*[A-Za-z0-9/+=]{20,}"
file_pattern = "*.ini"